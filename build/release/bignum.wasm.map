{"version":3,"sources":["~lib/rt/common.ts","~lib/shared/typeinfo.ts","~lib/rt/stub.ts","~lib/util/number.ts","~lib/util/string.ts","assembly/utils.ts","assembly/globals.ts","assembly/integer/u128.ts","~lib/string.ts","~lib/array.ts","~lib/util/error.ts","~lib/polyfills.ts","~lib/typedarray.ts","assembly/integer/u256.ts","assembly/integer/i256.ts","~lib/arraybuffer.ts","~lib/memory.ts","~lib/util/memory.ts","~lib/builtins.ts"],"names":[],"mappings":"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","sourceRoot":"assemblyscript:///","sourceContents":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n\n// ╒════════════════ Common block layout (32-bit) ═════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                           GC info                             │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                          runtime id                           │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                         runtime size                          │ -4\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                              ...                              │ ref\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize; // WASM64 needs adaption\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD = (offsetof<BLOCK>() + AL_MASK) & ~AL_MASK;\n\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","import { AL_MASK, BLOCK, BLOCK_OVERHEAD, BLOCK_MAXSIZE, AL_SIZE, DEBUG } from \"rt/common\";\n\n// @ts-ignore: decorator\n@lazy\nvar startOffset: usize = (__heap_base + AL_MASK) & ~AL_MASK;\n\n// @ts-ignore: decorator\n@lazy\nvar offset: usize = startOffset;\n\nfunction maybeGrowMemory(newOffset: usize): void {\n  // assumes newOffset is aligned\n  var pagesBefore = memory.size();\n  var maxOffset = <usize>pagesBefore << 16;\n  if (newOffset > maxOffset) {\n    let pagesNeeded = ((newOffset - maxOffset + 0xffff) & ~0xffff) >>> 16;\n    let pagesWanted = max(pagesBefore, pagesNeeded); // double memory\n    if (memory.grow(pagesWanted) < 0) {\n      if (memory.grow(pagesNeeded) < 0) unreachable(); // out of memory\n    }\n  }\n  offset = newOffset;\n}\n\n// @ts-ignore: decorator\n@unsafe @global\nexport function __alloc(size: usize, id: u32): usize {\n  if (size > BLOCK_MAXSIZE) unreachable();\n  var ptr = offset + BLOCK_OVERHEAD;\n  var actualSize = max<usize>((size + AL_MASK) & ~AL_MASK, AL_SIZE);\n  maybeGrowMemory(ptr + actualSize);\n  var block = changetype<BLOCK>(ptr - BLOCK_OVERHEAD);\n  block.mmInfo = actualSize;\n  if (DEBUG) block.gcInfo = -1;\n  block.rtId = id;\n  block.rtSize = size;\n  return ptr;\n}\n\n// @ts-ignore: decorator\n@unsafe @global\nexport function __realloc(ptr: usize, size: usize): usize {\n  assert(ptr != 0 && !(ptr & AL_MASK)); // must exist and be aligned\n  var block = changetype<BLOCK>(ptr - BLOCK_OVERHEAD);\n  var actualSize = block.mmInfo;\n  if (DEBUG) assert(block.gcInfo == -1);\n  var isLast = ptr + actualSize == offset;\n  var alignedSize = (size + AL_MASK) & ~AL_MASK;\n  if (size > actualSize) {\n    if (isLast) { // last block: grow\n      if (size > BLOCK_MAXSIZE) unreachable();\n      maybeGrowMemory(ptr + alignedSize);\n      block.mmInfo = alignedSize;\n    } else { // copy to new block at least double the size\n      let newPtr = __alloc(max<usize>(alignedSize, actualSize << 1), block.rtId);\n      memory.copy(newPtr, ptr, block.rtSize);\n      block = changetype<BLOCK>((ptr = newPtr) - BLOCK_OVERHEAD);\n    }\n  } else if (isLast) { // last block: shrink\n    offset = ptr + alignedSize;\n    block.mmInfo = alignedSize;\n  }\n  block.rtSize = size;\n  return ptr;\n}\n\n// @ts-ignore: decorator\n@unsafe @global\nexport function __free(ptr: usize): void {\n  assert(ptr != 0 && !(ptr & AL_MASK)); // must exist and be aligned\n  var block = changetype<BLOCK>(ptr - BLOCK_OVERHEAD);\n  if (DEBUG) assert(block.gcInfo == -1);\n  if (ptr + block.mmInfo == offset) { // last block: discard\n    offset = changetype<usize>(block);\n  }\n}\n\n// @ts-ignore: decorator\n@unsafe @global\nexport function __reset(): void { // special\n  offset = startOffset;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __retain(ref: usize): usize {\n  return ref;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __release(ref: usize): void {\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nfunction __visit(ref: usize, cookie: u32): void {\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __collect(): void {\n}\n","/// <reference path=\"../rt/index.d.ts\" />\n\nimport { idof } from \"../builtins\";\nimport { CharCode } from \"./string\";\nimport { ArrayBufferView } from \"../arraybuffer\";\n\n// @ts-ignore: decorator\n@inline\nexport const MAX_DOUBLE_LENGTH = 28;\n\n// @ts-ignore: decorator\n@lazy @inline\nconst POWERS10: u32[] = [\n  1,\n  10,\n  100,\n  1000,\n  10000,\n  100000,\n  1000000,\n  10000000,\n  100000000,\n  1000000000\n];\n\n/*\n  Lookup table for pairwise char codes in range [0-99]\n\n  \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\",\n  \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\n  \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\",\n  \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\",\n  \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\",\n  \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\",\n  \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\",\n  \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\",\n  \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\",\n  \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"\n*/\n// @ts-ignore: decorator\n@lazy @inline\nconst DIGITS: u32[] = [\n  0x00300030, 0x00310030, 0x00320030, 0x00330030, 0x00340030,\n  0x00350030, 0x00360030, 0x00370030, 0x00380030, 0x00390030,\n  0x00300031, 0x00310031, 0x00320031, 0x00330031, 0x00340031,\n  0x00350031, 0x00360031, 0x00370031, 0x00380031, 0x00390031,\n  0x00300032, 0x00310032, 0x00320032, 0x00330032, 0x00340032,\n  0x00350032, 0x00360032, 0x00370032, 0x00380032, 0x00390032,\n  0x00300033, 0x00310033, 0x00320033, 0x00330033, 0x00340033,\n  0x00350033, 0x00360033, 0x00370033, 0x00380033, 0x00390033,\n  0x00300034, 0x00310034, 0x00320034, 0x00330034, 0x00340034,\n  0x00350034, 0x00360034, 0x00370034, 0x00380034, 0x00390034,\n  0x00300035, 0x00310035, 0x00320035, 0x00330035, 0x00340035,\n  0x00350035, 0x00360035, 0x00370035, 0x00380035, 0x00390035,\n  0x00300036, 0x00310036, 0x00320036, 0x00330036, 0x00340036,\n  0x00350036, 0x00360036, 0x00370036, 0x00380036, 0x00390036,\n  0x00300037, 0x00310037, 0x00320037, 0x00330037, 0x00340037,\n  0x00350037, 0x00360037, 0x00370037, 0x00380037, 0x00390037,\n  0x00300038, 0x00310038, 0x00320038, 0x00330038, 0x00340038,\n  0x00350038, 0x00360038, 0x00370038, 0x00380038, 0x00390038,\n  0x00300039, 0x00310039, 0x00320039, 0x00330039, 0x00340039,\n  0x00350039, 0x00360039, 0x00370039, 0x00380039, 0x00390039\n];\n\n// @ts-ignore: decorator\n@lazy @inline\nconst EXP_POWERS: i16[] = [\n  -1220, -1193, -1166, -1140, -1113, -1087, -1060, -1034, -1007,  -980,\n   -954,  -927,  -901,  -874,  -847,  -821,  -794,  -768,  -741,  -715,\n   -688,  -661,  -635,  -608,  -582,  -555,  -529,  -502,  -475,  -449,\n   -422,  -396,  -369,  -343,  -316,  -289,  -263,  -236,  -210,  -183,\n   -157,  -130,  -103,   -77,   -50,   -24,     3,    30,    56,    83,\n    109,   136,   162,   189,   216,   242,   269,   295,   322,   348,\n    375,   402,   428,   455,   481,   508,   534,   561,   588,   614,\n    641,   667,   694,   720,   747,   774,   800,   827,   853,   880,\n    907,   933,   960,   986,  1013,  1039,  1066\n];\n\n// 1e-348, 1e-340, ..., 1e340\n// @ts-ignore: decorator\n@lazy @inline\nconst FRC_POWERS: u64[] = [\n  0xFA8FD5A0081C0288, 0xBAAEE17FA23EBF76, 0x8B16FB203055AC76, 0xCF42894A5DCE35EA,\n  0x9A6BB0AA55653B2D, 0xE61ACF033D1A45DF, 0xAB70FE17C79AC6CA, 0xFF77B1FCBEBCDC4F,\n  0xBE5691EF416BD60C, 0x8DD01FAD907FFC3C, 0xD3515C2831559A83, 0x9D71AC8FADA6C9B5,\n  0xEA9C227723EE8BCB, 0xAECC49914078536D, 0x823C12795DB6CE57, 0xC21094364DFB5637,\n  0x9096EA6F3848984F, 0xD77485CB25823AC7, 0xA086CFCD97BF97F4, 0xEF340A98172AACE5,\n  0xB23867FB2A35B28E, 0x84C8D4DFD2C63F3B, 0xC5DD44271AD3CDBA, 0x936B9FCEBB25C996,\n  0xDBAC6C247D62A584, 0xA3AB66580D5FDAF6, 0xF3E2F893DEC3F126, 0xB5B5ADA8AAFF80B8,\n  0x87625F056C7C4A8B, 0xC9BCFF6034C13053, 0x964E858C91BA2655, 0xDFF9772470297EBD,\n  0xA6DFBD9FB8E5B88F, 0xF8A95FCF88747D94, 0xB94470938FA89BCF, 0x8A08F0F8BF0F156B,\n  0xCDB02555653131B6, 0x993FE2C6D07B7FAC, 0xE45C10C42A2B3B06, 0xAA242499697392D3,\n  0xFD87B5F28300CA0E, 0xBCE5086492111AEB, 0x8CBCCC096F5088CC, 0xD1B71758E219652C,\n  0x9C40000000000000, 0xE8D4A51000000000, 0xAD78EBC5AC620000, 0x813F3978F8940984,\n  0xC097CE7BC90715B3, 0x8F7E32CE7BEA5C70, 0xD5D238A4ABE98068, 0x9F4F2726179A2245,\n  0xED63A231D4C4FB27, 0xB0DE65388CC8ADA8, 0x83C7088E1AAB65DB, 0xC45D1DF942711D9A,\n  0x924D692CA61BE758, 0xDA01EE641A708DEA, 0xA26DA3999AEF774A, 0xF209787BB47D6B85,\n  0xB454E4A179DD1877, 0x865B86925B9BC5C2, 0xC83553C5C8965D3D, 0x952AB45CFA97A0B3,\n  0xDE469FBD99A05FE3, 0xA59BC234DB398C25, 0xF6C69A72A3989F5C, 0xB7DCBF5354E9BECE,\n  0x88FCF317F22241E2, 0xCC20CE9BD35C78A5, 0x98165AF37B2153DF, 0xE2A0B5DC971F303A,\n  0xA8D9D1535CE3B396, 0xFB9B7CD9A4A7443C, 0xBB764C4CA7A44410, 0x8BAB8EEFB6409C1A,\n  0xD01FEF10A657842C, 0x9B10A4E5E9913129, 0xE7109BFBA19C0C9D, 0xAC2820D9623BF429,\n  0x80444B5E7AA7CF85, 0xBF21E44003ACDD2D, 0x8E679C2F5E44FF8F, 0xD433179D9C8CB841,\n  0x9E19DB92B4E31BA9, 0xEB96BF6EBADF77D9, 0xAF87023B9BF0EE6B\n];\n\n// Count number of decimals for u32 values\n// In our case input value always non-zero so we can simplify some parts\nexport function decimalCount32(value: u32): u32 {\n  if (value < 100000) {\n    if (value < 100) {\n      return select<u32>(1, 2, value < 10);\n    } else {\n      let m = select<u32>(4, 5, value < 10000);\n      return select<u32>(3, m, value < 1000);\n    }\n  } else {\n    if (value < 10000000) {\n      return select<u32>(6, 7, value < 1000000);\n    } else {\n      let m = select<u32>(9, 10, value < 1000000000);\n      return select<u32>(8, m, value < 100000000);\n    }\n  }\n}\n\n// Count number of decimals for u64 values\n// In our case input value always greater than 2^32-1 so we can skip some parts\nexport function decimalCount64(value: u64): u32 {\n  if (value < 1000000000000000) {\n    if (value < 1000000000000) {\n      let m = select<u32>(11, 12, value < 100000000000);\n      return select<u32>(10, m, value < 10000000000);\n    } else {\n      let m = select<u32>(14, 15, value < 100000000000000);\n      return select<u32>(13, m, value < 10000000000000);\n    }\n  } else {\n    if (value < 100000000000000000) {\n      return select<u32>(16, 17, value < 10000000000000000);\n    } else {\n      let m = select<u32>(19, 20, value < 10000000000000000000);\n      return select<u32>(18, m, value < 1000000000000000000);\n    }\n  }\n}\n\nfunction utoa32_lut(buffer: usize, num: u32, offset: usize): void {\n  var lut = changetype<ArrayBufferView>(DIGITS).dataStart;\n  while (num >= 10000) {\n    // in most VMs i32/u32 div and modulo by constant can be shared and simplificate\n    let t = num / 10000;\n    let r = num % 10000;\n    num = t;\n\n    let d1 = r / 100;\n    let d2 = r % 100;\n\n    let digits1 = <u64>load<u32>(lut + (<usize>d1 << alignof<u32>()));\n    let digits2 = <u64>load<u32>(lut + (<usize>d2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n  }\n\n  if (num >= 100) {\n    let t  = num / 100;\n    let d1 = num % 100;\n    num = t;\n    offset -= 2;\n    let digits = load<u32>(lut + (<usize>d1 << alignof<u32>()));\n    store<u32>(buffer + (offset << 1), digits);\n  }\n\n  if (num >= 10) {\n    offset -= 2;\n    let digits = load<u32>(lut + (<usize>num << alignof<u32>()));\n    store<u32>(buffer + (offset << 1), digits);\n  } else {\n    offset -= 1;\n    let digit = CharCode._0 + num;\n    store<u16>(buffer + (offset << 1), digit);\n  }\n}\n\nfunction utoa64_lut(buffer: usize, num: u64, offset: usize): void {\n  var lut = changetype<ArrayBufferView>(DIGITS).dataStart;\n  while (num >= 100000000) {\n    let t = num / 100000000;\n    let r = <usize>(num - t * 100000000);\n    num = t;\n\n    let b = r / 10000;\n    let c = r % 10000;\n\n    let b1 = b / 100;\n    let b2 = b % 100;\n    let c1 = c / 100;\n    let c2 = c % 100;\n\n    let digits1 = <u64>load<u32>(lut + (<usize>c1 << alignof<u32>()));\n    let digits2 = <u64>load<u32>(lut + (<usize>c2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n\n    digits1 = <u64>load<u32>(lut + (<usize>b1 << alignof<u32>()));\n    digits2 = <u64>load<u32>(lut + (<usize>b2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n  }\n\n  utoa32_lut(buffer, <u32>num, offset);\n}\n\nfunction utoa_simple<T extends number>(buffer: usize, num: T, offset: usize): void {\n  do {\n    let t = num / 10;\n    let r = <u32>(num % 10);\n    num = changetype<T>(t);\n    offset -= 1;\n    store<u16>(buffer + (offset << 1), CharCode._0 + r);\n  } while (num);\n}\n\n// @ts-ignore: decorator\n@inline\nexport function utoa32_core(buffer: usize, num: u32, offset: u32): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_simple(buffer, num, offset);\n  } else {\n    utoa32_lut(buffer, num, offset);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function utoa64_core(buffer: usize, num: u64, offset: u32): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_simple(buffer, num, offset);\n  } else {\n    utoa64_lut(buffer, num, offset);\n  }\n}\n\nexport function utoa32(value: u32): String {\n  if (!value) return \"0\";\n\n  var decimals = decimalCount32(value);\n  var out = __alloc(decimals << 1, idof<String>());\n\n  utoa32_core(out, value, decimals);\n  return changetype<String>(out); // retains\n}\n\nexport function itoa32(value: i32): String {\n  if (!value) return \"0\";\n\n  var sign = value < 0;\n  if (sign) value = -value;\n\n  var decimals = decimalCount32(value) + u32(sign);\n  var out = __alloc(decimals << 1, idof<String>());\n\n  utoa32_core(out, value, decimals);\n  if (sign) store<u16>(out, CharCode.MINUS);\n  return changetype<String>(out); // retains\n}\n\nexport function utoa64(value: u64): String {\n  if (!value) return \"0\";\n\n  var out: usize;\n  if (value <= u32.MAX_VALUE) {\n    let val32    = <u32>value;\n    let decimals = decimalCount32(val32);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa32_core(out, val32, decimals);\n  } else {\n    let decimals = decimalCount64(value);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa64_core(out, value, decimals);\n  }\n  return changetype<String>(out); // retains\n}\n\nexport function itoa64(value: i64): String {\n  if (!value) return \"0\";\n\n  var sign = value < 0;\n  if (sign) value = -value;\n\n  var out: usize;\n  if (<u64>value <= <u64>u32.MAX_VALUE) {\n    let val32    = <u32>value;\n    let decimals = decimalCount32(val32) + u32(sign);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa32_core(out, val32, decimals);\n  } else {\n    let decimals = decimalCount64(value) + u32(sign);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa64_core(out, value, decimals);\n  }\n  if (sign) store<u16>(out, CharCode.MINUS);\n\n  return changetype<String>(out); // retains\n}\n\nexport function itoa<T extends number>(value: T): String {\n  if (!isInteger<T>()) ERROR(\"integer type expected\");\n  if (isSigned<T>()) {\n    if (sizeof<T>() <= 4) {\n      return itoa32(<i32>value);\n    } else {\n      return itoa64(<i64>value);\n    }\n  } else {\n    if (sizeof<T>() <= 4) {\n      return utoa32(<u32>value);\n    } else {\n      return utoa64(<u64>value);\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@lazy\nvar _K: i32 = 0;\n\n// // @ts-ignore: decorator\n// @lazy\n// var _frc: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _exp: i32 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _frc_minus: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _frc_plus:  u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _frc_pow: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _exp_pow: i32 = 0;\n\n// @ts-ignore: decorator\n@inline\nfunction umul64f(u: u64, v: u64): u64 {\n  var u0 = u & 0xFFFFFFFF;\n  var v0 = v & 0xFFFFFFFF;\n\n  var u1 = u >> 32;\n  var v1 = v >> 32;\n\n  var l = u0 * v0;\n  var t = u1 * v0 + (l >> 32);\n  var w = u0 * v1 + (t & 0xFFFFFFFF);\n\n  w += 0x7FFFFFFF; // rounding\n\n  t >>= 32;\n  w >>= 32;\n\n  return u1 * v1 + t + w;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction umul64e(e1: i32, e2: i32): i32 {\n  return e1 + e2 + 64; // where 64 is significand size\n}\n\n// @ts-ignore: decorator\n@inline\nfunction normalizedBoundaries(f: u64, e: i32): void {\n  var frc = (f << 1) + 1;\n  var exp = e - 1;\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var m = 1 + i32(f == 0x0010000000000000);\n\n  _frc_plus  = frc;\n  _frc_minus = ((f << m) - 1) << e - m - exp;\n  _exp = exp;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction grisuRound(buffer: usize, len: i32, delta: u64, rest: u64, ten_kappa: u64, wp_w: u64): void {\n  var lastp = buffer + ((len - 1) << 1);\n  var digit = load<u16>(lastp);\n  while (\n    rest < wp_w &&\n    delta - rest >= ten_kappa && (\n      rest + ten_kappa < wp_w ||\n      wp_w - rest > rest + ten_kappa - wp_w\n    )\n  ) {\n    --digit;\n    rest += ten_kappa;\n  }\n  store<u16>(lastp, digit);\n}\n\n// @ts-ignore: decorator\n@inline\nfunction getCachedPower(minExp: i32): void {\n  const c = reinterpret<f64>(0x3FD34413509F79FE); // 1 / lg(10) = 0.30102999566398114\n  var dk = (-61 - minExp) * c + 347;\t            // dk must be positive, so can do ceiling in positive\n  var k = <i32>dk;\n      k += i32(k != dk); // conversion with ceil\n\n  var index = (k >> 3) + 1;\n  _K = 348 - (index << 3);\t// decimal exponent no need lookup table\n  _frc_pow = unchecked(FRC_POWERS[index]);\n  _exp_pow = unchecked(<i32>EXP_POWERS[index]);\n}\n\n// @ts-ignore: decorator\n@inline\nfunction grisu2(value: f64, buffer: usize, sign: i32): i32 {\n\n  // frexp routine\n  var uv  = reinterpret<u64>(value);\n  var exp = <i32>((uv & 0x7FF0000000000000) >>> 52);\n  var sid = uv & 0x000FFFFFFFFFFFFF;\n  var frc = (u64(exp != 0) << 52) + sid;\n      exp = select<i32>(exp, 1, exp != 0) - (0x3FF + 52);\n\n  normalizedBoundaries(frc, exp);\n  getCachedPower(_exp);\n\n  // normalize\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var frc_pow = _frc_pow;\n  var exp_pow = _exp_pow;\n\n  var w_frc = umul64f(frc, frc_pow);\n  var w_exp = umul64e(exp, exp_pow);\n\n  var wp_frc = umul64f(_frc_plus, frc_pow) - 1;\n  var wp_exp = umul64e(_exp,      exp_pow);\n\n  var wm_frc = umul64f(_frc_minus, frc_pow) + 1;\n  var delta  = wp_frc - wm_frc;\n\n  return genDigits(buffer, w_frc, w_exp, wp_frc, wp_exp, delta, sign);\n}\n\nfunction genDigits(buffer: usize, w_frc: u64, w_exp: i32, mp_frc: u64, mp_exp: i32, delta: u64, sign: i32): i32 {\n  var one_exp = -mp_exp;\n  var one_frc = (<u64>1) << one_exp;\n  var mask    = one_frc - 1;\n\n  var wp_w_frc = mp_frc - w_frc;\n  var wp_w_exp = mp_exp;\n\n  var p1 = <u32>(mp_frc >> one_exp);\n  var p2 = mp_frc & mask;\n\n  var kappa = <i32>decimalCount32(p1);\n  var len = sign;\n\n  var lut = changetype<ArrayBufferView>(POWERS10).dataStart;\n\n  while (kappa > 0) {\n    let d: u32;\n    switch (kappa) {\n      case 10: { d = p1 / 1000000000; p1 %= 1000000000; break; }\n      case  9: { d = p1 /  100000000; p1 %=  100000000; break; }\n      case  8: { d = p1 /   10000000; p1 %=   10000000; break; }\n      case  7: { d = p1 /    1000000; p1 %=    1000000; break; }\n      case  6: { d = p1 /     100000; p1 %=     100000; break; }\n      case  5: { d = p1 /      10000; p1 %=      10000; break; }\n      case  4: { d = p1 /       1000; p1 %=       1000; break; }\n      case  3: { d = p1 /        100; p1 %=        100; break; }\n      case  2: { d = p1 /         10; p1 %=         10; break; }\n      case  1: { d = p1;              p1 =           0; break; }\n      default: { d = 0; break; }\n    }\n\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d);\n\n    --kappa;\n    let tmp = ((<u64>p1) << one_exp) + p2;\n    if (tmp <= delta) {\n      _K += kappa;\n      grisuRound(buffer, len, delta, tmp, <u64>load<u32>(lut + (<usize>kappa << alignof<u32>())) << one_exp, wp_w_frc);\n      return len;\n    }\n  }\n\n  while (1) {\n    p2    *= 10;\n    delta *= 10;\n\n    let d = p2 >> one_exp;\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d);\n\n    p2 &= mask;\n    --kappa;\n    if (p2 < delta) {\n      _K += kappa;\n      wp_w_frc *= <u64>load<u32>(lut + (<usize>-kappa << alignof<u32>()));\n      grisuRound(buffer, len, delta, p2, one_frc, wp_w_frc);\n      return len;\n    }\n  }\n\n  return len;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction genExponent(buffer: usize, k: i32): i32 {\n  var sign = k < 0;\n  if (sign) k = -k;\n  var decimals = decimalCount32(k) + 1;\n  utoa32_core(buffer, k, decimals);\n  store<u16>(buffer, <u16>select<u32>(CharCode.MINUS, CharCode.PLUS, sign));\n  return decimals;\n}\n\nfunction prettify(buffer: usize, length: i32, k: i32): i32 {\n  if (!k) {\n    store<u32>(buffer + (length << 1), CharCode.DOT | (CharCode._0 << 16));\n    return length + 2;\n  }\n\n  var kk = length + k;\n  if (length <= kk && kk <= 21) {\n    // 1234e7 -> 12340000000\n    for (let i = length; i < kk; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0);\n    }\n    store<u32>(buffer + (kk << 1), CharCode.DOT | (CharCode._0 << 16));\n    return kk + 2;\n  } else if (kk > 0 && kk <= 21) {\n    // 1234e-2 -> 12.34\n    let ptr = buffer + (kk << 1);\n    memory.copy(\n      ptr + 2,\n      ptr,\n      -k << 1\n    );\n    store<u16>(buffer + (kk << 1), CharCode.DOT);\n    return length + 1;\n  } else if (-6 < kk && kk <= 0) {\n    // 1234e-6 -> 0.001234\n    let offset = 2 - kk;\n    memory.copy(\n      buffer + (offset << 1),\n      buffer,\n      length << 1\n    );\n    store<u32>(buffer, CharCode._0 | (CharCode.DOT << 16));\n    for (let i = 2; i < offset; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0);\n    }\n    return length + offset;\n  } else if (length == 1) {\n    // 1e30\n    store<u16>(buffer, CharCode.e, 2);\n    length = genExponent(buffer + 4, kk - 1);\n    return length + 2;\n  } else {\n    let len = length << 1;\n    memory.copy(\n      buffer + 4,\n      buffer + 2,\n      len - 2\n    );\n    store<u16>(buffer,       CharCode.DOT, 2);\n    store<u16>(buffer + len, CharCode.e,   2);\n    length += genExponent(buffer + len + 4, kk - 1);\n    return length + 2;\n  }\n}\n\nexport function dtoa_core(buffer: usize, value: f64): i32 {\n  var sign = i32(value < 0);\n  if (sign) {\n    value = -value;\n    store<u16>(buffer, CharCode.MINUS);\n  }\n  // assert(value > 0 && value <= 1.7976931348623157e308);\n  var len = grisu2(value, buffer, sign);\n      len = prettify(buffer + (sign << 1), len - sign, _K);\n  return len + sign;\n}\n\nexport function dtoa(value: f64): String {\n  if (value == 0) return \"0.0\";\n  if (!isFinite<f64>(value)) {\n    if (isNaN<f64>(value)) return \"NaN\";\n    return select<String>(\"-Infinity\", \"Infinity\", value < 0);\n  }\n  var buffer = __alloc(MAX_DOUBLE_LENGTH << 1, idof<String>());\n  var length = dtoa_core(buffer, value);\n  if (length == MAX_DOUBLE_LENGTH) return changetype<String>(buffer);\n  var result = changetype<String>(buffer).substring(0, length);\n  __free(buffer);\n  return result;\n}\n\nexport function itoa_stream<T extends number>(buffer: usize, offset: usize, value: T): u32 {\n  buffer += (offset << 1);\n  if (!value) {\n    store<u16>(buffer, CharCode._0);\n    return 1;\n  }\n  var decimals: u32 = 0;\n  if (isSigned<T>()) {\n    let sign = i32(value < 0);\n    if (sign) value = changetype<T>(-value);\n    if (sizeof<T>() <= 4) {\n      decimals = decimalCount32(value) + <u32>sign;\n      utoa32_core(buffer, value, decimals);\n    } else {\n      if (<u64>value <= <u64>u32.MAX_VALUE) {\n        let val32 = <u32>value;\n        decimals = decimalCount32(val32) + <u32>sign;\n        utoa32_core(buffer, val32, decimals);\n      } else {\n        decimals = decimalCount64(value) + <u32>sign;\n        utoa64_core(buffer, value, decimals);\n      }\n    }\n    if (sign) store<u16>(buffer, CharCode.MINUS);\n  } else {\n    if (sizeof<T>() <= 4) {\n      decimals = decimalCount32(value);\n      utoa32_core(buffer, value, decimals);\n    } else {\n      if (<u64>value <= <u64>u32.MAX_VALUE) {\n        let val32 = <u32>value;\n        decimals = decimalCount32(val32);\n        utoa32_core(buffer, val32, decimals);\n      } else {\n        decimals = decimalCount64(value);\n        utoa64_core(buffer, value, decimals);\n      }\n    }\n  }\n  return decimals;\n}\n\nexport function dtoa_stream(buffer: usize, offset: usize, value: f64): u32 {\n  buffer += (offset << 1);\n  if (value == 0.0) {\n    store<u16>(buffer, CharCode._0);\n    store<u16>(buffer, CharCode.DOT, 2);\n    store<u16>(buffer, CharCode._0,  4);\n    return 3;\n  }\n  if (!isFinite<f64>(value)) {\n    if (isNaN<f64>(value)) {\n      store<u16>(buffer, CharCode.N);\n      store<u16>(buffer, CharCode.a, 2);\n      store<u16>(buffer, CharCode.N, 4);\n      return 3;\n    } else {\n      let sign = i32(value < 0);\n      let len  = 8 + sign;\n      memory.copy(buffer, changetype<usize>(select<String>(\"-Infinity\", \"Infinity\", sign)), len << 1);\n      return len;\n    }\n  }\n  return dtoa_core(buffer, value);\n}\n","import { itoa, dtoa, itoa_stream, dtoa_stream, MAX_DOUBLE_LENGTH } from \"./number\";\nimport { ipow32 } from \"../math\";\n\n// @ts-ignore: decorator\n@inline\nexport const enum CharCode {\n  PLUS = 0x2B,\n  MINUS = 0x2D,\n  DOT = 0x2E,\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n  A = 0x41,\n  B = 0x42,\n  E = 0x45,\n  I = 0x49,\n  N = 0x4E,\n  O = 0x4F,\n  X = 0x58,\n  Z = 0x5A,\n  a = 0x61,\n  b = 0x62,\n  e = 0x65,\n  n = 0x6E,\n  o = 0x6F,\n  x = 0x78,\n  z = 0x7A\n}\n\n// 9 * 8 = 72 bytes\n// @ts-ignore: decorator\n@lazy\nconst Powers10Hi: f64[] = [1, 1e32, 1e64, 1e96, 1e128, 1e160, 1e192, 1e224, 1e256, 1e288];\n// 32 * 8 = 256 bytes\n// @ts-ignore: decorator\n@lazy\nconst Powers10Lo: f64[] = [\n  1e00, 1e01, 1e02, 1e03, 1e04, 1e05, 1e06, 1e07, 1e08, 1e09,\n  1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,\n  1e20, 1e21, 1e22, 1e23, 1e24, 1e25, 1e26, 1e27, 1e28, 1e29,\n  1e30, 1e31\n];\n\nexport function compareImpl(str1: string, index1: usize, str2: string, index2: usize, len: usize): i32 {\n  var ptr1 = changetype<usize>(str1) + (index1 << 1);\n  var ptr2 = changetype<usize>(str2) + (index2 << 1);\n  if (ASC_SHRINK_LEVEL < 2) {\n    if (len >= 4 && !((ptr1 & 7) | (ptr2 & 7))) {\n      do {\n        if (load<u64>(ptr1) != load<u64>(ptr2)) break;\n        ptr1 += 8;\n        ptr2 += 8;\n        len  -= 4;\n      } while (len >= 4);\n    }\n  }\n  while (len--) {\n    let a = <i32>load<u16>(ptr1);\n    let b = <i32>load<u16>(ptr2);\n    if (a != b) return a - b;\n    ptr1 += 2;\n    ptr2 += 2;\n  }\n  return 0;\n}\n\nexport function isSpace(c: i32): bool {\n  if (c <= 0xFF) {\n    // <SP>, <TAB>, <LF>, <VT>, <FF>, <CR> and <NBSP>\n    return c == 0x20 || <u32>(c - 0x09) <= 0x0D - 0x09 || c == 0xA0;\n  }\n  if (<u32>(c - 0x2000) <= 0x200A - 0x2000) return true;\n  switch (c) {\n    case 0x1680: // <LS> (1)\n    case 0x2028: // <LS> (2)\n    case 0x2029: // <PS>\n    case 0x202F: // <NNS>\n    case 0x205F: // <MMSP>\n    case 0x3000: // <IS>\n    case 0xFEFF: return true; // <ZWNBSP>\n  }\n  return false;\n}\n\n/** Parses a string to an integer (usually), using the specified radix. */\nexport function strtol<T>(str: string, radix: i32 = 0): T {\n  var len = str.length;\n  if (!len) {\n    // @ts-ignore: cast\n    if (isFloat<T>()) return <T>NaN;\n    // @ts-ignore: cast\n    return <T>0;\n  }\n\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\n  var code = <u32>load<u16>(ptr);\n\n  // determine sign\n  // @ts-ignore: cast\n  var sign: T = 1;\n  // trim white spaces\n  while (isSpace(code)) {\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  if (code == CharCode.MINUS) {\n    if (!--len) {\n      // @ts-ignore: cast\n      if (isFloat<T>()) return <T>NaN;\n      // @ts-ignore: cast\n      return <T>0;\n    }\n    code = <u32>load<u16>(ptr += 2);\n    // @ts-ignore: type\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) {\n      // @ts-ignore: cast\n      if (isFloat<T>()) return <T>NaN;\n      // @ts-ignore: cast\n      return <T>0;\n    }\n    code = <u32>load<u16>(ptr += 2);\n  }\n\n  // determine radix\n  if (!radix) {\n    if (code == CharCode._0 && len > 2) {\n      switch (<u32>load<u16>(ptr + 2) | 32) {\n        case CharCode.b: {\n          ptr += 4; len -= 2;\n          radix = 2;\n          break;\n        }\n        case CharCode.o: {\n          ptr += 4; len -= 2;\n          radix = 8;\n          break;\n        }\n        case CharCode.x: {\n          ptr += 4; len -= 2;\n          radix = 16;\n          break;\n        }\n        default: radix = 10;\n      }\n    } else radix = 10;\n  } else if (radix < 2 || radix > 36) {\n    // @ts-ignore: cast\n    if (isFloat<T>()) return <T>NaN;\n    // @ts-ignore: cast\n    return <T>0;\n  }\n\n  // calculate value\n  // @ts-ignore: type\n  var num: T = 0;\n  while (len--) {\n    code = <u32>load<u16>(ptr);\n    if (code - CharCode._0 < 10) {\n      code -= CharCode._0;\n    } else if (code - CharCode.A <= <u32>(CharCode.Z - CharCode.A)) {\n      code -= CharCode.A - 10;\n    } else if (code - CharCode.a <= <u32>(CharCode.z - CharCode.a)) {\n      code -= CharCode.a - 10;\n    } else break;\n    if (code >= <u32>radix) break;\n    // @ts-ignore: type\n    num = num * radix + code;\n    ptr += 2;\n  }\n  // @ts-ignore: type\n  return sign * num;\n}\n\nexport function strtod(str: string): f64 {\n  var len = str.length;\n  if (!len) return NaN;\n\n  var ptr  = changetype<usize>(str);\n  var code = <u32>load<u16>(ptr);\n\n  var sign = 1.;\n  // skip white spaces\n  while (len && isSpace(code)) {\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  if (!len) return NaN;\n\n  // try parse '-' or '+'\n  if (code == CharCode.MINUS) {\n    if (!--len) return NaN;\n    code = <u32>load<u16>(ptr += 2);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return NaN;\n    code = <u32>load<u16>(ptr += 2);\n  }\n\n  // try parse Infinity\n  if (len >= 8 && code == CharCode.I) {\n    if (\n      load<u64>(ptr, 0) == 0x690066006E0049 && // ifnI\n      load<u64>(ptr, 8) == 0x7900740069006E    // ytin\n    ) {\n      return copysign<f64>(Infinity, sign);\n    }\n    return NaN;\n  }\n  // validate next symbol\n  if (code != CharCode.DOT && <u32>(code - CharCode._0) >= 10) {\n    return NaN;\n  }\n  var savedPtr = ptr;\n  // skip zeros\n  while (code == CharCode._0) {\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  if (len <= 0) return 0;\n  const capacity = 19; // int(64 * 0.3010)\n  var pointed = false;\n  var consumed = 0;\n  var position = 0;\n  var x: u64 = 0;\n  if (code == CharCode.DOT) {\n    let noDigits = !(savedPtr - ptr);\n    ptr += 2; --len;\n    if (!len && noDigits) return NaN;\n    for (pointed = true; (code = <u32>load<u16>(ptr)) == CharCode._0; --position, ptr += 2) --len;\n    if (len <= 0) return 0;\n    if (!position && noDigits && code - CharCode._0 >= 10) return NaN;\n  }\n  for (let digit = code - CharCode._0; digit < 10 || (code == CharCode.DOT && !pointed); digit = code - CharCode._0) {\n    if (digit < 10) {\n      x = consumed < capacity ? 10 * x + digit : x | u64(!!digit);\n      ++consumed;\n    } else {\n      position = consumed;\n      pointed = true;\n    }\n    if (!--len) break;\n    code = <u32>load<u16>(ptr += 2);\n  }\n\n  if (!pointed) position = consumed;\n  return copysign<f64>(scientific(x, position - min(capacity, consumed) + parseExp(ptr, len)), sign);\n}\n\nexport function joinBooleanArray(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  if (!lastIndex) return select(\"true\", \"false\", load<bool>(dataStart));\n\n  var sepLen = separator.length;\n  var valueLen = 5; // max possible length of element len(\"false\")\n  var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n  var result = changetype<string>(__alloc(estLen << 1, idof<string>())); // retains\n  var offset = 0;\n  var value: bool;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<bool>(dataStart + i);\n    valueLen = 4 + i32(!value);\n    memory.copy(\n      changetype<usize>(result) + (<usize>offset << 1),\n      changetype<usize>(select(\"true\", \"false\", value)),\n      <usize>valueLen << 1\n    );\n    offset += valueLen;\n    if (sepLen) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<bool>(dataStart + <usize>lastIndex);\n  valueLen = 4 + i32(!value);\n  memory.copy(\n    changetype<usize>(result) + (<usize>offset << 1),\n    changetype<usize>(select(\"true\", \"false\", value)),\n    valueLen << 1\n  );\n  offset += valueLen;\n\n  if (estLen > offset) return result.substring(0, offset);\n  return result;\n}\n\nexport function joinIntegerArray<T>(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  // @ts-ignore: type\n  if (!lastIndex) return changetype<string>(itoa<T>(load<T>(dataStart))); // retains\n\n  var sepLen = separator.length;\n  const valueLen = (sizeof<T>() <= 4 ? 10 : 20) + i32(isSigned<T>());\n  var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n  var result = changetype<string>(__alloc(estLen << 1, idof<string>())); // retains\n  var offset = 0;\n  var value: T;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    // @ts-ignore: type\n    offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n    if (sepLen) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n  // @ts-ignore: type\n  offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n  if (estLen > offset) return result.substring(0, offset);\n  return result;\n}\n\nexport function joinFloatArray<T>(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  if (!lastIndex) {\n    return changetype<string>(dtoa(\n      // @ts-ignore: type\n      load<T>(dataStart))\n    ); // retains\n  }\n\n  const valueLen = MAX_DOUBLE_LENGTH;\n  var sepLen = separator.length;\n  var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n  var result = changetype<string>(__alloc(estLen << 1, idof<string>())); // retains\n  var offset = 0;\n  var value: T;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    offset += dtoa_stream(changetype<usize>(result), offset,\n      // @ts-ignore: type\n      value\n    );\n    if (sepLen) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n  offset += dtoa_stream(changetype<usize>(result), offset,\n    // @ts-ignore: type\n    value\n  );\n  if (estLen > offset) return result.substring(0, offset);\n  return result;\n}\n\nexport function joinStringArray(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  if (!lastIndex) {\n    // @ts-ignore: type\n    return load<string>(dataStart) || \"\";\n  }\n  var estLen = 0;\n  var value: string;\n  for (let i = 0; i < length; ++i) {\n    value = load<string>(dataStart + (<usize>i << alignof<string>()));\n    // @ts-ignore: type\n    if (value !== null) estLen += value.length;\n  }\n  var offset = 0;\n  var sepLen = separator.length;\n  var result = __alloc((estLen + sepLen * lastIndex) << 1, idof<string>());\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<string>(dataStart + (<usize>i << alignof<string>()));\n    if (value !== null) {\n      let valueLen = value.length;\n      memory.copy(\n        result + (<usize>offset << 1),\n        changetype<usize>(value),\n        <usize>valueLen << 1\n      );\n      offset += valueLen;\n    }\n    if (sepLen) {\n      memory.copy(\n        result + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<string>(dataStart + (<usize>lastIndex << alignof<string>()));\n  if (value !== null) {\n    memory.copy(\n      result + (<usize>offset << 1),\n      changetype<usize>(value),\n      <usize>value.length << 1\n    );\n  }\n  return changetype<string>(result); // retains\n}\n\nexport function joinReferenceArray<T>(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  var value: T;\n  if (!lastIndex) {\n    value = load<T>(dataStart);\n    // @ts-ignore: type\n    return value !== null ? value.toString() : \"\";\n  }\n  var result = \"\";\n  var sepLen = separator.length;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    // @ts-ignore: type\n    if (value !== null) result += value.toString();\n    if (sepLen) result += separator;\n  }\n  value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n  // @ts-ignore: type\n  if (value !== null) result += value.toString();\n  return result;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction scientific(significand: u64, exp: i32): f64 {\n  if (!significand || exp < -342) return 0;\n  if (exp > 308) return Infinity;\n  // Try use fast path\n  // Use fast path for string-to-double conversion if possible\n  // see http://www.exploringbinary.com/fast-path-decimal-to-floating-point-conversion\n  // Simple integer\n  var significandf = <f64>significand;\n  if (!exp) return significandf;\n  if (exp > 22 && exp <= 22 + 15) {\n    significandf *= pow10(exp - 22);\n    exp = 22;\n  }\n  if (significand <= 9007199254740991 && abs(exp) <= 22) {\n    if (exp > 0) return significandf * pow10(exp);\n    return significandf / pow10(-exp);\n  } else if (exp < 0) {\n    return scaledown(significand, exp);\n  } else {\n    return scaleup(significand, exp);\n  }\n}\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction scaledown(significand: u64, exp: i32): f64 {\n  const denom: u64 = 6103515625; // 1e14 * 0x1p-14\n  const scale = reinterpret<f64>(0x3F06849B86A12B9B); // 1e-14 * 0x1p32\n\n  var shift = clz(significand);\n  significand <<= shift;\n  shift = exp - shift;\n\n  for (; exp <= -14; exp += 14) {\n    let q = significand / denom;\n    let r = significand % denom;\n    let s = clz(q);\n    significand = (q << s) + <u64>nearest(scale * <f64>(r << (s - 18)));\n    shift -= s;\n  }\n  var b = <u64>ipow32(5, -exp);\n  var q = significand / b;\n  var r = significand % b;\n  var s = clz(q);\n  significand = (q << s) + <u64>(reinterpret<f64>(reinterpret<u64>(<f64>r) + (s << 52)) / <f64>b);\n  shift -= s;\n\n  return NativeMath.scalbn(<f64>significand, <i32>shift);\n}\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction scaleup(significand: u64, exp: i32): f64 {\n  const coeff: u32 = 1220703125; // 1e13 * 0x1p-13;\n  var shift = ctz(significand);\n  significand >>= shift;\n  shift += exp;\n\n  __fixmulShift = shift;\n  for (; exp >= 13; exp -= 13) {\n    significand = fixmul(significand, coeff);\n  }\n  significand = fixmul(significand, <u32>ipow32(5, exp));\n  shift = __fixmulShift;\n  return NativeMath.scalbn(<f64>significand, <i32>shift);\n}\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction parseExp(ptr: usize, len: i32): i32 {\n  var sign = 1, magnitude = 0;\n  var code = <u32>load<u16>(ptr);\n  // check code is 'e' or 'E'\n  if ((code | 32) != CharCode.e) return 0;\n\n  code = <u32>load<u16>(ptr += 2);\n  if (code == CharCode.MINUS) {\n    if (!--len) return 0;\n    code = <u32>load<u16>(ptr += 2);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return 0;\n    code = <u32>load<u16>(ptr += 2);\n  }\n  // skip zeros\n  while (code == CharCode._0) {\n    if (!--len) return 0;\n    code = <u32>load<u16>(ptr += 2);\n  }\n  for (let digit: u32 = code - CharCode._0; len && digit < 10; digit = code - CharCode._0) {\n    if (magnitude >= 3200) return sign * 3200;\n    magnitude = 10 * magnitude + digit;\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  return sign * magnitude;\n}\n\n// @ts-ignore: decorator\n@lazy\nvar __fixmulShift: u64 = 0;\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction fixmul(a: u64, b: u32): u64 {\n  var low  = (a & 0xFFFFFFFF) * b;\n  var high = (a >> 32) * b + (low >> 32);\n  var overflow = <u32>(high >> 32);\n  var space = clz(overflow);\n  var revspace: u64 = 32 - space;\n  __fixmulShift += revspace;\n  return (high << space | (low & 0xFFFFFFFF) >> revspace) + (low << space >> 31 & 1);\n}\n\n// @ts-ignore: decorator\nfunction pow10(n: i32): f64 {\n  // @ts-ignore: type\n  const hi = Powers10Hi.dataStart;\n  // @ts-ignore: type\n  const lo = Powers10Lo.dataStart;\n  return (\n    load<f64>(hi + ((n >> 5) << alignof<f64>())) *\n    load<f64>(lo + ((n & 31) << alignof<f64>()))\n  );\n}\n","import { CharCode } from \"util/string\";\nimport { u128 } from \"./integer/u128\";\nimport { u256 } from \"./integer/u256\";\n\nconst HEX_CHARS = '0123456789abcdef';\n\n// @ts-ignore: decorator\n@lazy const MaxBaseForExponent128: u64[] = [\n  u64.MAX_VALUE,       // 0\n  u64.MAX_VALUE,       // 1\n  u64.MAX_VALUE,       // 2\n  0x000006597FA94F5B,  // 3\n  0x00000000FFFFFFFF,  // 4\n  0x0000000003080C00,  // 5\n  0x0000000000285145,  // 6\n  0x000000000004E045,  // 7\n  0x000000000000FFFF,  // 8\n  0x0000000000004AA8,  // 9\n  0x0000000000001BDB,  // 10\n  0x0000000000000C6F,  // 11\n  0x0000000000000659,  // 12\n  0x0000000000000398,  // 13\n  0x0000000000000235,  // 14\n  0x0000000000000172,  // 15\n  0x00000000000000FF,  // 16\n  0x00000000000000B8,  // 17\n  0x000000000000008A,  // 18\n  0x000000000000006A,  // 19\n  0x0000000000000054,  // 20\n  0x0000000000000044,  // 21\n  0x0000000000000038,  // 22\n  0x000000000000002F,  // 23\n  0x0000000000000028,  // 24\n  0x0000000000000022,  // 25\n  0x000000000000001E,  // 26\n  0x000000000000001A,  // 27\n  0x0000000000000017,  // 28\n  0x0000000000000015,  // 29\n  0x0000000000000013,  // 30\n  0x0000000000000011,  // 31\n  0x000000000000000F,  // 32\n  0x000000000000000E,  // 33\n  0x000000000000000D,  // 34\n  0x000000000000000C,  // 35\n  0x000000000000000B,  // 36\n  0x000000000000000B,  // 37\n  0x000000000000000A,  // 38\n];\n\n// Use LUT wrapped by function for lazy compilation\n// @ts-ignore: decorator\n@lazy const RadixCharsTable: u8[] = [\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 36, 36, 36, 36, 36, 36,\n  36, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 36, 36, 36, 36,\n  36, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35\n];\n\nexport function isPowerOverflow128(base: u128, exponent: i32): bool {\n  if (!(exponent > 1 && base > u128.One)) return false;\n  if (base.hi != 0 || exponent >= 128)    return true;\n\n  var low = base.lo;\n  if (low <= 9) {\n    switch (<i32>low) {\n      case 2: return exponent > 127;\n      case 3: return exponent > 80;\n      case 4: return exponent > 63;\n      case 5: return exponent > 55;\n      case 6: return exponent > 49;\n      case 7: return exponent > 45;\n      case 8: return exponent > 42;\n      case 9: return exponent > 40;\n    }\n  }\n  return low > MaxBaseForExponent128[exponent];\n}\n\n// helper function for utoa\nfunction processU64(digits: Int8Array, value: u64): void {\n  var length = digits.length - 1;\n  for (let i = 63; i != -1; i--) {\n    for (let j = 0; j <= length; j++) {\n      digits[j] = digits[j] + (i8(digits[j] >= 5) * 3);\n    }\n    for (let j = length; j != -1; j--) {\n      digits[j] = digits[j] << 1;\n      if (j < length) digits[j + 1]  = (digits[j+1] | i8(digits[j] > 15));\n      digits[j] = digits[j] & 15;\n    }\n    digits[0] = digits[0] + i8((value & (1 << i)) != 0);\n  }\n}\n\nexport function u128toa10(value: u128): string {\n  var length = 40;\n  var digits = new Int8Array(length);\n\n  processU64(digits, value.hi);\n  processU64(digits, value.lo);\n\n  var result = \"\";\n  var start = false;\n  for (let i = length - 1; i != -1; i--) {\n    if (!start && digits[i] > 0) start = true;\n    if (start) result = result.concat(HEX_CHARS.charAt(digits[i]));\n  }\n  return result;\n}\n\nexport function u256toa10(value: u256): string {\n  var length = 78;\n  var digits = new Int8Array(length);\n\n  processU64(digits, value.hi2);\n  processU64(digits, value.hi1);\n  processU64(digits, value.lo2);\n  processU64(digits, value.lo1);\n\n  var result = \"\";\n  var start = false;\n  for (let i = length - 1; i != -1; i--) {\n    if (!start && digits[i] > 0) start = true;\n    if (start) result = result.concat(HEX_CHARS.charAt(digits[i]));\n  }\n  return result;\n}\n\nexport function atou128(str: string, radix: i32 = 0): u128 {\n  if (!radix) radix = 10;\n  if (radix < 2 || radix > 36) {\n    throw new Error(\"Invalid radix\");\n  }\n  var len = str.length;\n  if (!len) return u128.Zero;\n\n  var first = str.charCodeAt(0);\n  if (len == 1 && first == CharCode._0) {\n    return u128.Zero;\n  }\n  var isNeg = first == CharCode.MINUS;\n  var index = <i32>(isNeg || first == CharCode.PLUS);\n\n  if (str.charCodeAt(index) == CharCode._0) {\n    let second = str.charCodeAt(++index);\n    if (second == CharCode.x || second == CharCode.X) {\n      radix = 16; ++index;\n    } else if (second == CharCode.o || second == CharCode.O) {\n      radix = 8; ++index;\n    } else if (second == CharCode.b || second == CharCode.B) {\n      radix = 2; ++index;\n    }\n  }\n  var result = u128.Zero;\n  var table  = RadixCharsTable;\n\n  if (ASC_SHRINK_LEVEL >= 1) {\n    let radix128 = u128.fromU64(radix);\n    do {\n      let n: u32 = str.charCodeAt(index) - CharCode._0;\n      if (n > <u32>(CharCode.z - CharCode._0)) break;\n\n      let num = table[n];\n      if (num >= <u8>radix) break;\n\n      result *= radix128;\n      result += u128.fromU64(num);\n    } while (++index < len);\n  } else {\n    switch (radix) {\n      case 2: {\n        do {\n          let num: u32 = str.charCodeAt(index) - CharCode._0;\n          if (num >= 2) break;\n          result <<= 1;\n          result |= u128.fromU64(num);\n        } while (++index < len);\n        break;\n      }\n      case 10: {\n        do {\n          let num: u32 = str.charCodeAt(index) - CharCode._0;\n          if (num >= 10) break;\n          result  = (result << 3) + (result << 1);\n          result += u128.fromU64(num);\n        } while (++index < len);\n        break;\n      }\n      case 16: {\n        do {\n          let n: u32 = str.charCodeAt(index) - CharCode._0;\n          if (n > <u32>(CharCode.z - CharCode._0)) break;\n\n          let num = table[n];\n          if (num >= 16) break;\n\n          result <<= 4;\n          result |= u128.fromU64(num);\n        } while (++index < len);\n        break;\n      }\n      default: {\n        let radix128 = u128.fromU64(radix);\n        do {\n          let n: u32 = str.charCodeAt(index) - CharCode._0;\n          if (n > <u32>(CharCode.z - CharCode._0)) break;\n\n          let num = table[n];\n          if (num >= <u8>radix) break;\n\n          result *= radix128;\n          result += u128.fromU64(num);\n        } while (++index < len);\n        break;\n      }\n    }\n  }\n\n  return isNeg ? -result : result;\n}\n","import { u128 } from './integer/u128';\n\n/*\n * Current utility functions can be overloaded by imported from environment with same name and signatue.\n *\n * Example:\n *  declare function __floatuntidf(lo: u64, hi: u64): f64\n */\n\n// used for returning quotient and reminder from __divmod128\nexport var __divmod_quot_lo: u64 = 0;\nexport var __divmod_quot_hi: u64 = 0;\nexport var __divmod_rem:     u64 = 0;\n\n// used for returning low and high part of __mulq64, __multi3 etc\nexport var __res128_lo: u64 = 0;\nexport var __res128_hi: u64 = 0;\n\n/**\n * Convert 128-bit unsigned integer to 64-bit float\n * @param  lo lower  64-bit part of unsigned 128-bit integer\n * @param  hi higher 64-bit part of unsigned 128-bit integer\n * @return    64-bit float result\n */\n// @ts-ignore: decorator\n@global\nexport function __floatuntidf(lo: u64, hi: u64): f64 {\n  // __floatuntidf ported from LLVM sources\n  if (!(lo | hi)) return 0.0;\n\n  var v  = new u128(lo, hi);\n  var sd = 128 - __clz128(lo, hi);\n  var e  = sd - 1;\n\n  if (sd > 53) {\n    if (sd != 55) {\n      if (sd == 54) {\n        v = u128.shl(v, 1);\n      } else {\n        v = u128.or(\n          u128.shr(v, sd - 55),\n          u128.fromBool(u128.and(v, u128.shr(u128.Max, 128 + 55 - sd)).toBool())\n        );\n      }\n    }\n\n    v.lo |= (v.lo & 4) >> 2;\n    v.preInc();\n\n    v = u128.shr(v, 2);\n\n    if (v.lo & (1 << 53)) {\n      v = u128.shr(v, 1);\n      ++e;\n    }\n\n  } else {\n    v = u128.shl(v, 53 - sd);\n  }\n\n  var w: u64 = u128.shr(v, 32).lo & 0x000FFFFF;\n  var u: u64 = <u64>(((e + 1023) << 20) | w) << 32;\n  return reinterpret<f64>(u | (v.lo & 0xFFFFFFFF));\n}\n\n// @ts-ignore: decorator\n@global\nexport function __umulh64(u: u64, v: u64): u64 {\n  var u0 = u & 0xFFFFFFFF;\n  var v0 = v & 0xFFFFFFFF;\n\n  var u1 = u >> 32;\n  var v1 = v >> 32;\n\n  var l = u0 * v0;\n  var t = u1 * v0 + (l >> 32);\n  var w = u0 * v1 + (t & 0xFFFFFFFF);\n\n  t >>= 32;\n  w >>= 32;\n\n  return u1 * v1 + t + w;\n}\n\n// @ts-ignore: decorator\n@global\nexport function __umulq64(_res: usize, u: u64, v: u64): void {\n  var u1: u64 , v1: u64, w0: u64, w1: u64, t: u64;\n\n  u1 = u & 0xFFFFFFFF;\n  v1 = v & 0xFFFFFFFF;\n\n  u >>= 32;\n  v >>= 32;\n\n  t  = u1 * v1;\n  w0 = t & 0xFFFFFFFF;\n  t  = u * v1 + (t >> 32);\n  w1 = t >> 32;\n  t  = u1 * v + (t & 0xFFFFFFFF);\n\n  __res128_lo = (t << 32) + w0;\n  __res128_hi = u * v + w1 + (t >> 32);\n}\n\n// @ts-ignore: decorator\n@global\nexport function __multi3(_res: usize, al: u64, ah: u64, bl: u64, bh: u64): void {\n  var u = al, v = bl;\n  var w: u64, k: u64;\n\n  var u1 = u & 0xFFFFFFFF;\n  var v1 = v & 0xFFFFFFFF;\n  var t  = u1 * v1;\n  var w1 = t & 0xFFFFFFFF;\n\n  u = u >> 32;\n  t = u * v1 + (t >> 32);\n  k = t & 0xFFFFFFFF;\n  w = t >> 32;\n  v = v >> 32;\n  t = u1 * v + k;\n\n  var lo  = w1 + (t << 32);\n  var hi  = u  * v + w;\n      hi += ah * bl;\n      hi += al * bh;\n      hi += t >> 32;\n\n  __res128_lo = lo;\n  __res128_hi = hi;\n}\n\nexport var __float_u128_lo: u64 = 0;\nexport var __float_u128_hi: u64 = 0;\n\n// @ts-ignore: decorator\n@global\nexport function __floatuntfdi(value: f64): void {\n  var u = reinterpret<u64>(value);\n\n  // if (value < -1.7014118346046e38) { // -(2^127-1)\n  if (value < reinterpret<f64>(0xC7F0000000000000)) { // -(2^128-1)\n    // overflow negative\n    __float_u128_lo = 0;\n    // __float_u128_hi = <u64>-1; // for i128\n    __float_u128_hi = 0;\n    // } else if (value < -9.2233720368547e18) { // -2^63-1 // for i128\n  } else if (value < reinterpret<f64>(0xC3F0000000000000)) { // // -(2^64-1)\n    let lo: u64, hi: u64, m: u64;\n\n    m = (u & 0x000FFFFFFFFFFFFF) | (1 << 52);\n    u = (u & 0x7FFFFFFFFFFFFFFF) >> 52;\n\n    u -= 1075;\n    if (u > 64) {\n      lo = 0;\n      hi = m << (u - 64);\n    } else {\n      lo = m << u;\n      hi = m >> (64 - u);\n    }\n    __float_u128_lo = ~lo;\n    __float_u128_hi = ~hi;\n    // } else if (value < 9.2233720368547e18) { // 2^63-1 // for i128\n  } else if (value < reinterpret<f64>(0x43F0000000000000)) { // 2^64-1\n    // fit in a u64\n    __float_u128_lo = <u64>value;\n    // __float_u128_hi = (value < 0) ? -1 : 0; // for int\n    __float_u128_hi = 0;\n    // } else if (value < 1.7014118346046e38) {\n  } else if (value < reinterpret<f64>(0x47F0000000000000)) { // 2^128-1\n    let lo: u64, hi: u64, m: u64;\n\n    m = (u & 0x000FFFFFFFFFFFFF) | (1 << 52);\n    u = (u & 0x7FFFFFFFFFFFFFFF) >> 52;\n    u -= 1075;\n    if (u > 64) {\n      lo = 0;\n      hi = m << (u - 64);\n    } else {\n      lo = m << u;\n      hi = m >> (64 - u);\n    }\n    __float_u128_lo = lo;\n    __float_u128_hi = hi;\n  } else {\n    // overflow positive\n    __float_u128_lo = <u64>-1;\n    __float_u128_hi = <u64>-1; // 0x7FFFFFFFFFFFFFFF for i128\n  }\n}\n\n// @ts-ignore: decorator\n@global @inline\nexport function __clz128(lo: u64, hi: u64): i32 {\n  // return <i32>(hi ? clz(hi) : clz(lo) + 64);\n  // var mask: u64 = -(<u64>(hi == 0));\n  var mask: u64 = <i64>(hi ^ (hi - 1)) >> 63;\n  return <i32>clz((hi & ~mask) | (lo & mask)) + (<i32>mask & 64);\n}\n\n// @ts-ignore: decorator\n@global @inline\nexport function __ctz128(lo: u64, hi: u64): i32 {\n  // return <i32>(lo ? ctz(lo) : ctz(hi) + 64);\n  // var mask: u64 = -(<u64>(lo == 0));\n  var mask: u64 = <i64>(lo ^ (lo - 1)) >> 63;\n  return <i32>ctz((hi & mask) | (lo & ~mask)) + (<i32>mask & 64);\n}\n\n// @ts-ignore: decorator\n@global\nexport function __udivmod128(alo: u64, ahi: u64, blo: u64, bhi: u64): void {\n  var bzn = __clz128(blo, bhi); // N\n  if (bzn == 128)\n    unreachable(); // div by zero\n\n  var azn = __clz128(alo, ahi); // M\n  var btz = __ctz128(blo, bhi); // N\n\n  if (!(alo | ahi)) {\n    __divmod_quot_lo = 0;\n    __divmod_quot_hi = 0;\n    __divmod_rem     = 0;\n    return;\n  }\n\n  if (bzn == 127) {\n    __divmod_quot_lo = alo;\n    __divmod_quot_hi = ahi;\n    __divmod_rem     = 0;\n    return;\n  }\n\n  if (btz + bzn == 127) {\n    // TODO\n    // __divmod_quot = a >> btz\n    // b++\n    // __divmod_rem = a & b\n    return;\n  }\n\n  if (!(ahi | bhi)) {\n    __divmod_quot_hi = 0;\n\n    // if `b.lo` is power of two\n    if (!(blo & (blo - 1))) {\n      __divmod_quot_lo = alo >> btz;\n      __divmod_rem  = 0;\n    } else {\n      let dlo = alo / blo;\n      __divmod_quot_lo = dlo\n      __divmod_rem     = alo - dlo * blo;\n    }\n    return;\n  }\n\n  // if b.lo == 0 and `b.hi` is power of two\n  if (!blo && !(bhi & (bhi - 1))) {\n    __divmod_rem = 0;\n\n    // TODO\n\n    return;\n  }\n\n  var diff: i64 = ahi - bhi;\n  var cmp = <i32>(diff != 0 ? diff : alo - blo); // TODO optimize this\n\n  if (cmp <= 0) {\n    __divmod_quot_lo = u64(cmp == 0);\n    __divmod_quot_hi = 0;\n    __divmod_rem     = 0;\n    return;\n  }\n\n  if (bzn - azn <= 5) {\n    // TODO\n    // fast path\n    __udivmod128core(alo, ahi, blo, bhi);\n  } else {\n    __udivmod128core(alo, ahi, blo, bhi);\n  }\n}\n\n// @ts-ignore: decorator\n@global\nexport function __udivmod128core(alo: u64, ahi: u64, blo: u64, bhi: u64): void {\n  var a = new u128(alo, ahi);\n  var b = new u128(blo, bhi);\n  var q = u128.Zero;\n  var n = a.clone();\n  // get leading zeros for left alignment\n  var alz = __clz128(n.lo, n.hi);\n  var blz = __clz128(b.lo, b.hi);\n  var off = blz - alz;\n  var nb  = b << off;\n\n  // create a mask with the length of b\n  var mask = u128.One;\n  mask <<= 128 - blz;\n  --mask;\n  mask <<= off;\n\n  var i = 0;\n  while (n >= b) {\n    ++i;\n    q <<= 1;\n    if ((n & mask) >= nb) {\n      ++q;\n      n -= nb;\n    }\n\n    mask |= mask >> 1;\n    nb >>= 1;\n  }\n  q <<= (blz - alz - i + 1);\n\n  __divmod_quot_lo = q.lo;\n  __divmod_quot_hi = q.hi;\n  __divmod_rem     = n.lo;\n}\n\n// @ts-ignore: decorator\n@global\nexport function __udivmod128_10(_q: usize, _r: usize, lo: u64, hi: u64): void {\n  if (!hi) {\n    __divmod_quot_hi = 0;\n    if (lo < 10) {\n      __divmod_quot_lo = 0;\n      __divmod_rem     = 0;\n    } else {\n      let qlo = lo / 10;\n      __divmod_quot_lo = qlo;\n      __divmod_rem     = lo - qlo * 10;\n    }\n    return;\n  }\n\n  var q: u128, r: u128;\n  var n = new u128(lo, hi);\n\n  q  = n >> 1;\n  q += n >> 2;\n  q += q >> 4;\n  q += q >> 8;\n  q += q >> 16;\n  q += q >> 32;\n  q += u128.fromU64(q.hi); // q >> 64\n  q >>= 3;\n  r = n - (((q << 2) + q) << 1);\n  n = q + u128.fromBool(r.lo > 9);\n\n  __divmod_quot_lo = n.lo;\n  __divmod_quot_hi = n.hi;\n  __divmod_rem     = r.lo;\n}\n","import { i128 } from './i128';\nimport { i256 } from './i256';\nimport { u256 } from './u256';\n\n// TODO import this on top level 'index.ts'\nimport {\n  __clz128,\n  __ctz128,\n  __floatuntidf,\n\n  __multi3,\n  __res128_lo,\n  __res128_hi,\n\n  __udivmod128,\n  __udivmod128_10,\n\n  __divmod_quot_lo,\n  __divmod_quot_hi,\n  __divmod_rem,\n} from '../globals';\n\nimport { atou128, u128toa10 } from '../utils';\n\n@lazy const HEX_CHARS = '0123456789abcdef';\n\nexport class u128 {\n\n  @inline static get Zero(): u128 { return new u128(); }\n  @inline static get One():  u128 { return new u128(1); }\n  @inline static get Min():  u128 { return new u128(); }\n  @inline static get Max():  u128 { return new u128(-1, -1); }\n\n  @inline\n  static fromString(value: string, radix: i32 = 0): u128 {\n    return atou128(value, radix);\n  }\n\n  @inline\n  static fromI256(value: i256): u128 {\n    return new u128(value.lo1, value.lo2);\n  }\n\n  @inline\n  static fromU256(value: u256): u128 {\n    return new u128(value.lo1, value.lo2);\n  }\n\n  @inline\n  static fromI128(value: i128): u128 {\n    return new u128(value.lo, value.hi);\n  }\n\n  @inline\n  static fromU128(value: u128): u128 {\n    return new u128(value.lo, value.hi);\n  }\n\n  @inline\n  static fromI64(value: i64): u128 {\n    return new u128(value, value >> 63);\n  }\n\n  @inline\n  static fromU64(value: u64): u128 {\n    return new u128(value);\n  }\n\n  // TODO need improvement\n  // max safe uint for f64 actually 53-bits\n  @inline\n  static fromF64(value: f64): u128 {\n    return new u128(<u64>value, -(value < 0));\n  }\n\n  // TODO need improvement\n  // max safe int for f32 actually 23-bits\n  @inline\n  static fromF32(value: f32): u128 {\n    return new u128(<u64>value, -(value < 0));\n  }\n\n  @inline\n  static fromI32(value: i32): u128 {\n    return new u128(value, value >> 63);\n  }\n\n  @inline\n  static fromU32(value: u32): u128 {\n    return new u128(value);\n  }\n\n  @inline\n  static fromBool(value: bool): u128 {\n    return new u128(<u64>value);\n  }\n\n  @inline\n  static fromBits(lo1: u32, lo2: u32, hi1: u32, hi2: u32): u128 {\n    return new u128(\n      <u64>lo1 | ((<u64>lo2) << 32),\n      <u64>hi1 | ((<u64>hi2) << 32),\n    );\n  }\n\n  @inline\n  static fromBytes<T>(array: T, bigEndian: bool = false): u128 {\n    if (array instanceof u8[]) {\n      return bigEndian ? u128.fromBytesBE(<u8[]>array) : u128.fromBytesLE(<u8[]>array);\n    } else if (array instanceof Uint8Array) {\n      return bigEndian ? u128.fromUint8ArrayBE(<Uint8Array>array) : u128.fromUint8ArrayLE(<Uint8Array>array);\n    } else {\n      throw new TypeError(\"Unsupported generic type\");\n    }\n  }\n\n  static fromBytesLE(array: u8[]): u128 {\n    assert(array.length && (array.length & 15) == 0);\n    var buffer = array.dataStart;\n    return new u128(\n      load<u64>(buffer, 0),\n      load<u64>(buffer, 1 * sizeof<u64>())\n    );\n  }\n\n  static fromBytesBE(array: u8[]): u128 {\n    assert(array.length && (array.length & 15) == 0);\n    var buffer = array.dataStart;\n    return new u128(\n      bswap<u64>(load<u64>(buffer, 1 * sizeof<u64>())),\n      bswap<u64>(load<u64>(buffer, 0 * sizeof<u64>()))\n    );\n  }\n\n  static fromUint8ArrayLE(array: Uint8Array): u128 {\n    assert(array.length && (array.length & 15) == 0);\n    var buffer = array.dataStart\n    return new u128(\n        load<u64>(buffer, 0),\n        load<u64>(buffer, 1 * sizeof<u64>())\n    );\n  }\n\n  static fromUint8ArrayBE(array: Uint8Array): u128 {\n    assert(array.length && (array.length & 15) == 0);\n    var buffer = array.dataStart\n    return new u128(\n        bswap<u64>(load<u64>(buffer, 1 * sizeof<u64>())),\n        bswap<u64>(load<u64>(buffer, 0 * sizeof<u64>()))\n    );\n  }\n\n  /**\n   * Create 128-bit unsigned integer from generic type T\n   * @param  value\n   * @returns 128-bit unsigned integer\n   */\n  @inline\n  static from<T>(value: T): u128 {\n         if (value instanceof bool)   return u128.fromU64(<u64>value);\n    else if (value instanceof i8)     return u128.fromI64(<i64>value);\n    else if (value instanceof u8)     return u128.fromU64(<u64>value);\n    else if (value instanceof i16)    return u128.fromI64(<i64>value);\n    else if (value instanceof u16)    return u128.fromU64(<u64>value);\n    else if (value instanceof i32)    return u128.fromI64(<i64>value);\n    else if (value instanceof u32)    return u128.fromU64(<u64>value);\n    else if (value instanceof i64)    return u128.fromI64(<i64>value);\n    else if (value instanceof u64)    return u128.fromU64(<u64>value);\n    else if (value instanceof f32)    return u128.fromF64(<f64>value);\n    else if (value instanceof f64)    return u128.fromF64(<f64>value);\n    else if (value instanceof i128)   return u128.fromI128(<i128>value);\n    else if (value instanceof u128)   return u128.fromU128(<u128>value);\n    else if (value instanceof i256)   return u128.fromI256(<i256>value);\n    else if (value instanceof u256)   return u128.fromU256(<u256>value);\n    else if (value instanceof u8[])   return u128.fromBytes(<u8[]>value);\n    else if (value instanceof Uint8Array) return u128.fromBytes(<Uint8Array>value);\n    else if (value instanceof String) return u128.fromString(<string>value);\n    else throw new TypeError(\"Unsupported generic type\");\n  }\n\n  /**\n   * Create 128-bit unsigned integer from 64-bit parts\n   * @param lo low  64-bit part of 128-bit unsigned integer\n   * @param hi high 64-bit part of 128-bit unsigned integer\n   */\n  constructor(\n    public lo: u64 = 0,\n    public hi: u64 = 0,\n  ) {}\n\n  @inline\n  set(value: u128): this {\n    this.lo = value.lo;\n    this.hi = value.hi;\n    return this;\n  }\n\n  @inline\n  setI64(value: i64): this {\n    this.lo = value;\n    this.hi = value >> 63;\n    return this;\n  }\n\n  @inline\n  setU64(value: u64): this {\n    this.lo = value;\n    this.hi = 0;\n    return this;\n  }\n\n  @inline\n  setI32(value: i32): this {\n    this.lo = value;\n    this.hi = value >> 63;\n    return this;\n  }\n\n  @inline\n  setU32(value: u32): this {\n    this.lo = value;\n    this.hi = 0;\n    return this;\n  }\n\n  @inline\n  isZero(): bool {\n    return !(this.lo | this.hi);\n  }\n\n  @inline @operator.prefix('~')\n  not(): u128 {\n    return new u128(~this.lo, ~this.hi);\n  }\n\n  @inline @operator.prefix('+')\n  pos(): u128 {\n    return this;\n  }\n\n  @inline @operator.prefix('-')\n  neg(): u128 {\n    var lo = ~this.lo, hi = ~this.hi;\n    var cy = ((lo & 1) + (lo >> 1)) >> 63;\n    return new u128(lo + 1, hi + cy);\n  }\n\n  @inline @operator.prefix('++')\n  preInc(): this {\n    var tmp  = this.lo + 1;\n    this.hi += ((this.lo ^ tmp) & this.lo) >> 63;\n    this.lo  = tmp;\n    return this;\n  }\n\n  @inline @operator.prefix('--')\n  preDec(): this {\n    var tmp  = this.lo - 1;\n    this.hi -= ((this.lo ^ tmp) & tmp) >> 63;\n    this.lo  = tmp;\n    return this;\n  }\n\n  @inline @operator.postfix('++')\n  postInc(): u128 {\n    return this.clone().preInc();\n  }\n\n  @inline @operator.postfix('--')\n  postDec(): u128 {\n    return this.clone().preDec();\n  }\n\n  @inline @operator.prefix('!')\n  static isEmpty(value: u128): bool {\n    return value === null || !(value.lo | value.hi);\n  }\n\n  @inline @operator('|')\n  static or(a: u128, b: u128): u128 {\n    return new u128(a.lo | b.lo, a.hi | b.hi);\n  }\n\n  @inline @operator('^')\n  static xor(a: u128, b: u128): u128 {\n    return new u128(a.lo ^ b.lo, a.hi ^ b.hi);\n  }\n\n  @inline @operator('&')\n  static and(a: u128, b: u128): u128 {\n    return new u128(a.lo & b.lo, a.hi & b.hi);\n  }\n\n  @inline @operator('<<')\n  static shl(value: u128, shift: i32): u128 {\n    shift &= 127;\n\n    // need for preventing redundant i32 -> u64 extends\n    var shift64 = shift as u64;\n\n    var mod1 = ((((shift64 + 127) | shift64) & 64) >> 6) - 1;\n    var mod2 = (shift64 >> 6) - 1;\n\n    shift64 &= 63;\n\n    var vl = value.lo;\n    var lo = vl << shift64;\n    var hi = lo & ~mod2;\n\n    hi |= ((value.hi << shift64) | ((vl >> (64 - shift64)) & mod1)) & mod2;\n\n    return new u128(lo & mod2, hi);\n  }\n\n  @inline @operator('>>')\n  static shr(value: u128, shift: i32): u128 {\n    shift &= 127;\n\n    // need for preventing redundant i32 -> u64 extends\n    var shift64 = shift as u64;\n\n    var mod1 = ((((shift64 + 127) | shift64) & 64) >> 6) - 1;\n    var mod2 = (shift64 >> 6) - 1;\n\n    shift64 &= 63;\n\n    var vh = value.hi;\n    var hi = vh >> shift64;\n    var lo = hi & ~mod2;\n\n    lo |= ((value.lo >> shift64) | ((vh << (64 - shift64)) & mod1)) & mod2;\n\n    return new u128(lo, hi & mod2);\n  }\n\n  @inline @operator('>>>')\n  static shr_u(value: u128, shift: i32): u128 {\n    return u128.shr(value, shift);\n  }\n\n  @inline\n  static rotl(value: u128, shift: i32): u128 {\n    shift &= 127;\n    if (shift == 0) return value;\n\n    var shift64 = (128 - shift) as u64;\n\n    var mod1 = ((((shift64 + 127) | shift64) & 64) >> 6) - 1;\n    var mod2 = (shift64 >> 6) - 1;\n\n    shift64 &= 63;\n\n    var vl = value.lo;\n    var vh = value.hi;\n    var hi1 = vh >> shift64;\n    var lo1 = hi1 & ~mod2;\n\n    lo1 |= ((vl >> shift64) | ((vh << (64 - shift64)) & mod1)) & mod2;\n    hi1 &= mod2;\n\n    shift64 = shift;\n\n    mod1 = ((((shift64 + 127) | shift64) & 64) >> 6) - 1;\n    mod2 = (shift64 >> 6) - 1;\n\n    shift64 &= 63;\n\n    var lo2 = vl << shift64;\n    var hi2 = lo2 & ~mod2;\n\n    hi2 |= ((vh << shift64) | ((vl >> (64 - shift64)) & mod1)) & mod2;\n    lo2 &= mod2;\n\n    return new u128(lo1 | lo2, hi1 | hi2);\n  }\n\n  @inline\n  static rotr(value: u128, shift: i32): u128 {\n    shift &= 127;\n    if (shift == 0) return value;\n\n    var shift64 = (128 - shift) as u64;\n\n    var mod1 = ((((shift64 + 127) | shift64) & 64) >> 6) - 1;\n    var mod2 = (shift64 >> 6) - 1;\n\n    shift64 &= 63;\n\n    var vl = value.lo;\n    var vh = value.hi;\n    var lo1 = vl << shift64;\n    var hi1 = lo1 & ~mod2;\n\n    hi1 |= ((vh << shift64) | ((vl >> (64 - shift64)) & mod1)) & mod2;\n    lo1 &= mod2;\n\n    shift64 = shift;\n\n    mod1 = ((((shift64 + 127) | shift64) & 64) >> 6) - 1;\n    mod2 = (shift64 >> 6) - 1;\n\n    shift64 &= 63;\n\n    var hi2 = vh >> shift64;\n    var lo2 = hi2 & ~mod2;\n\n    lo2 |= ((vl >> shift64) | ((vh << (64 - shift64)) & mod1)) & mod2;\n    hi2 &= mod2;\n\n    return new u128(lo1 | lo2, hi1 | hi2);\n  }\n\n  @inline @operator('+')\n  static add(a: u128, b: u128): u128 {\n    var bl = b.lo;\n    var lo = a.lo + bl;\n    var hi = a.hi + b.hi + (<u64>(lo < bl));\n\n    return new u128(lo, hi);\n  }\n\n  @inline @operator('-')\n  static sub(a: u128, b: u128): u128 {\n    var al = a.lo;\n    var lo = al   - b.lo;\n    var hi = a.hi - b.hi - (<u64>(lo > al));\n\n    return new u128(lo, hi);\n  }\n\n  // mul: u128 x u128 = u128\n  @inline @operator('*')\n  static mul(a: u128, b: u128): u128 {\n    __multi3(null, a.lo, a.hi, b.lo, b.hi);\n    return new u128(__res128_lo, __res128_hi);\n  }\n\n  @inline @operator('/')\n  static div(a: u128, b: u128): u128 {\n    __udivmod128(a.lo, a.hi, b.lo, b.hi);\n    return new u128(__divmod_quot_lo, __divmod_quot_hi);\n  }\n\n  @inline @operator('%')\n  static rem(a: u128, b: u128): u128 {\n    __udivmod128(a.lo, a.hi, b.lo, b.hi);\n    return u128.from(__divmod_rem);\n  }\n\n  @inline\n  static div10(value: u128): u128 {\n    __udivmod128_10(null, null, value.lo, value.hi);\n    return new u128(__divmod_quot_lo, __divmod_quot_hi);\n  }\n\n  @inline\n  static rem10(value: u128): u128 {\n    __udivmod128_10(null, null, value.lo, value.hi);\n    return u128.from(__divmod_rem);\n  }\n\n  /**\n   * Calculate power of base with exponent\n   * @param  base     128-bit unsigned integer\n   * @param  exponent 32-bit signed integer\n   * @returns         128-bit unsigned integer\n   */\n  @operator('**')\n  static pow(base: u128, exponent: i32): u128 {\n    // any negative exponent produce zero\n\n    var result = u128.One;\n\n    if (base == result) return result;\n    if (exponent < 0) return u128.Zero;\n\n    var tmp = base.clone();\n\n    switch (exponent) {\n      case 0: return result;\n      case 1: return tmp;\n    }\n\n    var lo = base.lo;\n    var hi = base.hi;\n\n    if (ASC_SHRINK_LEVEL < 1) {\n      // if base > u64::max and exp > 1 always return \"0\"\n      if (!lo) return u128.Zero;\n      if (!hi) {\n        let lo1 = lo - 1;\n        // \"1 ^ exponent\" always return \"1\"\n        if (!lo1) return u128.One;\n\n        // if base is power of two do \"1 << log2(base) * exp\"\n        if (!(lo & lo1)) {\n          let shift = <i32>(64 - clz(lo1)) * exponent;\n          return shift < 128 ? u128.One << shift : u128.Zero;\n        }\n      }\n\n      if (exponent <= 4) {\n        let sqrbase = u128.sqr(base);\n        switch (exponent) {\n          case 2: return sqrbase;        // base ^ 2\n          case 3: return sqrbase * base; // base ^ 2 * base\n          case 4: return sqrbase.sqr();  // base ^ 2 * base ^ 2\n          default: break;\n        }\n      }\n\n      let log = 32 - clz(exponent);\n      if (log <= 7) {\n        // 128 = 2 ^ 7, so need usually only seven cases\n        switch (log) {\n          case 7:\n            if (exponent & 1) result *= tmp;\n            exponent >>= 1;\n            tmp.sqr();\n          case 6:\n            if (exponent & 1) result *= tmp;\n            exponent >>= 1;\n            tmp.sqr();\n          case 5:\n            if (exponent & 1) result *= tmp;\n            exponent >>= 1;\n            tmp.sqr();\n          case 4:\n            if (exponent & 1) result *= tmp;\n            exponent >>= 1;\n            tmp.sqr();\n          case 3:\n            if (exponent & 1) result *= tmp;\n            exponent >>= 1;\n            tmp.sqr();\n          case 2:\n            if (exponent & 1) result *= tmp;\n            exponent >>= 1;\n            tmp.sqr();\n          case 1:\n            if (exponent & 1) result *= tmp;\n        }\n        return result;\n      }\n    }\n\n    while (exponent > 0) {\n      if (exponent & 1) result *= tmp;\n      exponent >>= 1;\n      tmp.sqr();\n    }\n    return result;\n  }\n\n  // compute floor(sqrt(x))\n  static sqrt(value: u128): u128 {\n    if (value <= u128.One)    return value;\n    if (value <= new u128(3)) return u128.One;\n\n    let res: u64 = 0;\n    let add: u64 = 0x8000000000000000;\n    let tmp = new u128();\n    for (let i = 0; i < 64; ++i) {\n      tmp.setU64(res | add);\n      let sqr = tmp * tmp;\n      if (value >= sqr) {\n        res = tmp.lo;\n      }\n      add >>= 1;\n    }\n    return new u128(res);\n  }\n\n  @inline @operator('==')\n  static eq(a: u128, b: u128): bool {\n    return a.hi == b.hi && a.lo == b.lo;\n  }\n\n  @inline @operator('!=')\n  static ne(a: u128, b: u128): bool {\n    return !u128.eq(a, b);\n  }\n\n  @inline @operator('<')\n  static lt(a: u128, b: u128): bool {\n    var ah = a.hi, bh = b.hi;\n    return ah == bh ? a.lo < b.lo : ah < bh;\n  }\n\n  @inline @operator('>')\n  static gt(a: u128, b: u128): bool {\n    var ah = a.hi, bh = b.hi;\n    return ah == bh ? a.lo > b.lo : ah > bh;\n  }\n\n  @inline @operator('<=')\n  static le(a: u128, b: u128): bool {\n    return !u128.gt(a, b);\n  }\n\n  @inline @operator('>=')\n  static ge(a: u128, b: u128): bool {\n    return !u128.lt(a, b);\n  }\n\n  @inline\n  static cmp(a: u128, b: u128): i32 {\n    var dlo: i64 = a.lo - b.lo;\n    var dhi: i64 = a.hi - b.hi;\n    // return <i32>(dhi != 0 ? dhi : dlo);\n    return <i32>select<i64>(dhi, dlo, dhi != 0);\n  }\n\n  /**\n   * Compute count of set (populated) bits\n   * @param  value 128-bit unsigned integer\n   * @returns      32-bit signed integer\n   */\n  @inline\n  static popcnt(value: u128): i32 {\n    return <i32>(popcnt(value.lo) + popcnt(value.hi));\n  }\n\n  /**\n   * Compute bit count of leading zeros\n   * @param  value 128-bit unsigned integer\n   * @returns      32-bit signed integer\n   */\n  @inline\n  static clz(value: u128): i32 {\n    return __clz128(value.lo, value.hi);\n  }\n\n  /**\n   * Compute bit count of trailing zeros\n   * @param  value 128-bit unsigned integer\n   * @returns      32-bit signed integer\n   */\n  @inline\n  static ctz(value: u128): i32 {\n    return __ctz128(value.lo, value.hi);\n  }\n\n  /**\n   * Calculate squared value (value ** 2)\n   * @param  value 128-bit unsigned integer\n   * @returns      128-bit unsigned integer\n   */\n  static sqr(value: u128): u128 {\n    return value.clone().sqr();\n  }\n\n  // wide mul: u128 * u128 = u256\n  static mulq(a: u128, b: u128): u256 {\n    // TODO\n    return u256.Zero;\n  }\n\n  /**\n   * Calculate inplace squared 128-bit unsigned integer (this ** 2)\n   * @returns 128-bit unsigned integer\n   */\n  sqr(): this {\n    var u = this.lo,\n        v = this.hi;\n\n    var u1 = u & 0xFFFFFFFF;\n    var t  = u1 * u1;\n    var w  = t & 0xFFFFFFFF;\n    var k  = t >> 32;\n\n    u >>= 32;\n    var m = u * u1;\n    t = m + k;\n    var w1 = t >> 32;\n\n    t = m + (t & 0xFFFFFFFF);\n\n    var lo = (t << 32) + w;\n    var hi  = u * u;\n        hi += w1 + (t >> 32);\n        hi += u * v << 1;\n\n    this.lo = lo;\n    this.hi = hi;\n\n    return this;\n  }\n\n  /**\n  * Convert to 256-bit signed integer\n  * @returns 256-bit signed integer\n  */\n  @inline\n  toI256(): i256 {\n    return new i256(this.lo, this.hi);\n  }\n\n  /**\n  * Convert to 256-bit unsigned integer\n  * @returns 256-bit unsigned integer\n  */\n  @inline\n  toU256(): u256 {\n    return new u256(this.lo, this.hi);\n  }\n\n  /**\n  * Convert to 128-bit signed integer\n  * @returns 128-bit signed integer\n  */\n  @inline\n  toI128(): i128 {\n    return new i128(this.lo, this.hi);\n  }\n\n  /**\n  * Convert to 128-bit unsigned integer\n  * @returns 128-bit unsigned integer\n  */\n  @inline\n  toU128(): this {\n    return this;\n  }\n\n  /**\n  * Convert to 64-bit signed integer\n  * @returns 64-bit signed integer\n  */\n  @inline\n  toI64(): i64 {\n    return <i64>(\n      (this.lo & 0x7FFFFFFFFFFFFFFF) |\n      (this.hi & 0x8000000000000000)\n    );\n  }\n\n  /**\n  * Convert to 64-bit unsigned integer\n  * @returns 64-bit unsigned integer\n  */\n  @inline\n  toU64(): u64 {\n    return this.lo;\n  }\n\n  /**\n  * Convert to 32-bit signed integer\n  * @returns 32-bit signed integer\n  */\n  @inline\n  toI32(): i32 {\n    return <i32>this.toI64();\n  }\n\n  /**\n  * Convert to 32-bit unsigned integer\n  * @returns 32-bit unsigned integer\n  */\n  @inline\n  toU32(): u32 {\n    return <u32>this.lo;\n  }\n\n  /**\n  * Convert to 1-bit boolean\n  * @returns 1-bit boolean\n  */\n  @inline\n  toBool(): bool {\n    return (this.lo | this.hi) != 0;\n  }\n\n  /**\n  * Convert to 64-bit float number in deteministic way\n  * @returns 64-bit float\n  */\n  @inline\n  toF64(): f64 {\n    return __floatuntidf(this.lo, this.hi);\n  }\n\n  // Simpler and faster alternative of \"toF64\"\n  // but non-deteministic (using float point arithmetics)\n  toF64Unsafe(): f64 {\n    const shift = reinterpret<f64>(0x43F0000000000000); // 2 ^ 64\n    var lo = this.lo, hi = this.hi;\n\n    if (hi >= 0)\n      return <f64>hi * shift + <f64>lo;\n\n    var rh: i64 = ~hi;\n    var rl: u64 = ~lo;\n\n    var cy = ((rl & 1) + (rl >> 1)) >> 63;\n    rl += 1;\n    rh += cy;\n\n    return -(<f64>rh * shift + <f64>rl);\n  }\n\n  /**\n  * Convert to 32-bit float number\n  * @returns 32-bit float\n  */\n  @inline\n  toF32(): f32 {\n    return <f32>this.toF64();\n  }\n\n  /**\n   * Convert to generic type T. Useful inside other generics methods\n   * @param  T  is <bool | i8 | u8 | i16 | u16 | i32 | u32 | i64 | u64 | f32 | f64 | u128 | u256 | u8[] | Uint8Array | String>\n   * @returns   type of T\n   */\n  @inline\n  as<T>(): T {\n    var dummy: T;\n         if (dummy instanceof bool)       return <T>this.toBool();\n    else if (dummy instanceof i8)         return <T>this.toI64();\n    else if (dummy instanceof u8)         return <T>this.toU64();\n    else if (dummy instanceof i16)        return <T>this.toI64();\n    else if (dummy instanceof u16)        return <T>this.toU64();\n    else if (dummy instanceof i32)        return <T>this.toI64();\n    else if (dummy instanceof i64)        return <T>this.toI64();\n    else if (dummy instanceof u32)        return <T>this.toU64();\n    else if (dummy instanceof u64)        return <T>this.toU64();\n    else if (dummy instanceof f32)        return <T>this.toF64();\n    else if (dummy instanceof f64)        return <T>this.toF64();\n    else if (dummy instanceof i128)       return <T>this.toI128();\n    else if (dummy instanceof u128)       return <T>this.toU128();\n    else if (dummy instanceof u256)       return <T>this.toU256();\n    else if (dummy instanceof u8[])       return <T>this.toBytes();\n    else if (dummy instanceof Uint8Array) return <T>this.toUint8Array();\n    else if (dummy instanceof String)     return <T>this.toString();\n    else throw new TypeError('Unsupported generic type');\n  }\n\n  private toArrayBufferLE(buffer: usize): void {\n    store<u64>(buffer, this.lo, 0);\n    store<u64>(buffer, this.hi, 1 * sizeof<u64>());\n  }\n\n  private toArrayBufferBE(buffer: usize): void {\n    store<u64>(buffer, bswap(this.hi), 0);\n    store<u64>(buffer, bswap(this.lo), 1 * sizeof<u64>());\n  }\n\n  private toArrayBuffer(buffer: usize, bigEndian: bool = false): void {\n    if (bigEndian) {\n      this.toArrayBufferBE(buffer);\n    } else {\n      this.toArrayBufferLE(buffer);\n    }\n  }\n\n  /**\n   * Convert to byte array\n   * @param le Little or Big Endian? Default: true\n   * @returns  Array of bytes\n   */\n  @inline\n  toBytes(bigEndian: bool = false): u8[] {\n    var result = new Array<u8>(16);\n    var buffer = result.dataStart\n    this.toArrayBuffer(buffer, bigEndian);\n    return result;\n  }\n\n  /**\n   * Convert to Uint8Array\n   * @param le Little or Big Endian? Default: true\n   * @returns  Uint8Array\n   */\n  @inline\n  toUint8Array(bigEndian: bool = false): Uint8Array {\n    var result = new Uint8Array(16);\n    var buffer = result.dataStart\n    this.toArrayBuffer(buffer, bigEndian);\n    return result;\n  }\n\n  /**\n  * Return copy of current 128-bit value\n  * @returns 128-bit unsigned integer\n  */\n  @inline\n  clone(): u128 {\n    return new u128(this.lo, this.hi);\n  }\n\n  toString(radix: i32 = 0): string {\n    if (!radix) radix = 10;\n    assert(radix == 10 || radix == 16, 'radix argument must be between 10 or 16');\n\n    if (this.isZero()) return '0';\n\n    var result = '';\n    var it = this.clone();\n    if (radix == 16) {\n      let shift: i32 = 124 - (u128.clz(it) & ~3);\n      while (shift >= 0) {\n        it     >>= shift;\n        result = result.concat(HEX_CHARS.charAt(<i32>(it.lo & 15)));\n        shift  -= 4;\n      }\n      return result;\n    } else if (radix == 10) {\n      return u128toa10(this);\n    }\n\n    return 'undefined';\n  }\n}\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { BLOCK, BLOCK_OVERHEAD, BLOCK_MAXSIZE } from \"./rt/common\";\nimport { compareImpl, strtol, strtod, isSpace } from \"./util/string\";\nimport { E_INVALIDLENGTH } from \"./util/error\";\nimport { ArrayBufferView } from \"./arraybuffer\";\nimport { idof } from \"./builtins\";\n\n@sealed export abstract class String {\n\n  @lazy static readonly MAX_LENGTH: i32 = BLOCK_MAXSIZE >>> alignof<u16>();\n\n  static fromCharCode(unit: i32, surr: i32 = -1): string {\n    var hasSur = surr > 0;\n    var out = __alloc(2 << i32(hasSur), idof<string>());\n    store<u16>(out, <u16>unit);\n    if (hasSur) store<u16>(out, <u16>surr, 2);\n    return changetype<string>(out); // retains\n  }\n\n  static fromCodePoint(code: i32): string {\n    assert(<u32>code <= 0x10FFFF);\n    var hasSur = code > 0xFFFF;\n    var out = __alloc(2 << i32(hasSur), idof<string>());\n    if (!hasSur) {\n      store<u16>(out, <u16>code);\n    } else {\n      code -= 0x10000;\n      let lo: u32 = (code & 0x3FF) + 0xDC00;\n      let hi: u32 = (code >>> 10) + 0xD800;\n      store<u32>(out, hi | (lo << 16));\n    }\n    return changetype<string>(out); // retains\n  }\n\n  get length(): i32 {\n    return changetype<BLOCK>(changetype<usize>(this) - BLOCK_OVERHEAD).rtSize >> 1;\n  }\n\n  @operator(\"[]\") charAt(pos: i32): String {\n    if (<u32>pos >= <u32>this.length) return changetype<String>(\"\");\n    var out = __alloc(2, idof<String>());\n    store<u16>(out, load<u16>(changetype<usize>(this) + (<usize>pos << 1)));\n    return changetype<String>(out); // retains\n  }\n\n  charCodeAt(pos: i32): i32 {\n    if (<u32>pos >= <u32>this.length) return -1; // (NaN)\n    return load<u16>(changetype<usize>(this) + (<usize>pos << 1));\n  }\n\n  codePointAt(pos: i32): i32 {\n    if (<u32>pos >= <u32>this.length) return -1; // (undefined)\n    var first = <i32>load<u16>(changetype<usize>(this) + (<usize>pos << 1));\n    if (first < 0xD800 || first > 0xDBFF || pos + 1 == this.length) return first;\n    var second = <i32>load<u16>(changetype<usize>(this) + ((<usize>pos + 1) << 1));\n    if (second < 0xDC00 || second > 0xDFFF) return first;\n    return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;\n  }\n\n  @operator(\"+\") private static __concat(left: String, right: String): String {\n    return select<String>(left, changetype<String>(\"null\"), left !== null).concat(right);\n  }\n\n  concat(other: String): String {\n    if (other === null) other = changetype<String>(\"null\");\n    var thisSize: isize = this.length << 1;\n    var otherSize: isize = other.length << 1;\n    var outSize: usize = thisSize + otherSize;\n    if (outSize == 0) return changetype<String>(\"\");\n    var out = changetype<String>(__alloc(outSize, idof<String>())); // retains\n    memory.copy(changetype<usize>(out), changetype<usize>(this), thisSize);\n    memory.copy(changetype<usize>(out) + thisSize, changetype<usize>(other), otherSize);\n    return out;\n  }\n\n  endsWith(search: String, end: i32 = String.MAX_LENGTH): bool {\n    if (search === null) return false;\n    end = min(max(end, 0), this.length);\n    var searchLength = <isize>search.length;\n    var searchStart = <isize>end - searchLength;\n    if (searchStart < 0) return false;\n    // @ts-ignore: string <-> String\n    return !compareImpl(this, searchStart, search, 0, searchLength);\n  }\n\n  @operator(\"==\") private static __eq(left: String | null, right: String | null): bool {\n    if (left === right) return true;\n    if (left === null || right === null) return false;\n    var leftLength = left.length;\n    if (leftLength != right.length) return false;\n    // @ts-ignore: string <-> String\n    return !compareImpl(left, 0, right, 0, leftLength);\n  }\n\n  @operator.prefix(\"!\")\n  private static __not(str: String | null): bool {\n    return str === null || !str.length;\n  }\n\n  @operator(\"!=\")\n  private static __ne(left: String | null, right: String | null): bool {\n    return !this.__eq(left, right);\n  }\n\n  @operator(\">\") private static __gt(left: String | null, right: String | null): bool {\n    if (left === right || left === null || right === null) return false;\n    var leftLength  = left.length;\n    var rightLength = right.length;\n    if (!leftLength)  return false;\n    if (!rightLength) return true;\n    // @ts-ignore: string <-> String\n    return compareImpl(left, 0, right, 0, min(leftLength, rightLength)) > 0;\n  }\n\n  @operator(\">=\") private static __gte(left: String, right: String): bool {\n    return !this.__lt(left, right);\n  }\n\n  @operator(\"<\") private static __lt(left: String, right: String): bool {\n    if (left === right || left === null || right === null) return false;\n    var leftLength  = left.length;\n    var rightLength = right.length;\n    if (!rightLength) return false;\n    if (!leftLength)  return true;\n    // @ts-ignore: string <-> String\n    return compareImpl(left, 0, right, 0, min(leftLength, rightLength)) < 0;\n  }\n\n  @operator(\"<=\") private static __lte(left: String, right: String): bool {\n    return !this.__gt(left, right);\n  }\n\n  includes(search: String, start: i32 = 0): bool {\n    return this.indexOf(search, start) != -1;\n  }\n\n  indexOf(search: String, start: i32 = 0): i32 {\n    var searchLen = <isize>search.length;\n    if (!searchLen) return 0;\n    var len = <isize>this.length;\n    if (!len) return -1;\n    var searchStart = min(max(<isize>start, 0), len);\n    for (len -= searchLen; searchStart <= len; ++searchStart) {\n      // @ts-ignore: string <-> String\n      if (!compareImpl(this, searchStart, search, 0, searchLen)) return <i32>searchStart;\n    }\n    return -1;\n  }\n\n  lastIndexOf(search: String, start: i32 = i32.MAX_VALUE): i32 {\n    var searchLen = <isize>search.length;\n    if (!searchLen) return this.length;\n    var len = this.length;\n    if (!len) return -1;\n    var searchStart = min(max(<isize>start, 0), <isize>len - searchLen);\n    for (; searchStart >= 0; --searchStart) {\n      // @ts-ignore: string <-> String\n      if (!compareImpl(this, searchStart, search, 0, searchLen)) return <i32>searchStart;\n    }\n    return -1;\n  }\n\n  startsWith(search: String, start: i32 = 0): bool {\n    if (search === null) search = changetype<String>(\"null\");\n    var len = <isize>this.length;\n    var searchStart = min(max(<isize>start, 0), len);\n    var searchLength = <isize>search.length;\n    if (searchLength + searchStart > len) return false;\n    // @ts-ignore: string <-> String\n    return !compareImpl(this, searchStart, search, 0, searchLength);\n  }\n\n  substr(start: i32, length: i32 = i32.MAX_VALUE): String { // legacy\n    var intStart: isize = start;\n    var end: isize = length;\n    var size: isize = this.length;\n    if (intStart < 0) intStart = max(size + intStart, 0);\n    var resultLength = min(max(end, 0), size - intStart);\n    if (resultLength <= 0) return changetype<String>(\"\");\n    var out = __alloc(resultLength << 1, idof<String>());\n    memory.copy(out, changetype<usize>(this) + intStart, resultLength);\n    return changetype<String>(out); // retains\n  }\n\n  substring(start: i32, end: i32 = i32.MAX_VALUE): String {\n    var len: isize = this.length;\n    var finalStart = min<isize>(max(start, 0), len);\n    var finalEnd = min<isize>(max(end, 0), len);\n    var fromPos = min<isize>(finalStart, finalEnd) << 1;\n    var toPos = max<isize>(finalStart, finalEnd) << 1;\n    len = toPos - fromPos;\n    if (!len) return changetype<String>(\"\");\n    if (!fromPos && toPos == this.length << 1) return this;\n    var out = __alloc(len, idof<String>());\n    memory.copy(out, changetype<usize>(this) + fromPos, len);\n    return changetype<String>(out); // retains\n  }\n\n  trim(): String {\n    var length = this.length;\n    var size: usize = length << 1;\n    while (size && isSpace(load<u16>(changetype<usize>(this) + size - 2))) {\n      size -= 2;\n    }\n    var offset: usize = 0;\n    while (offset < size && isSpace(load<u16>(changetype<usize>(this) + offset))) {\n      offset += 2; size -= 2;\n    }\n    if (!size) return changetype<String>(\"\");\n    if (!offset && size == length << 1) return this;\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this) + offset, size);\n    return changetype<String>(out); // retains\n  }\n\n  @inline\n  trimLeft(): String {\n    return this.trimStart();\n  }\n\n  @inline\n  trimRight(): String {\n    return this.trimEnd();\n  }\n\n  trimStart(): String {\n    var size = <usize>this.length << 1;\n    var offset: usize = 0;\n    while (offset < size && isSpace(load<u16>(changetype<usize>(this) + offset))) {\n      offset += 2;\n    }\n    if (!offset) return this;\n    size -= offset;\n    if (!size) return changetype<String>(\"\");\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this) + offset, size);\n    return changetype<String>(out); // retains\n  }\n\n  trimEnd(): String {\n    var originalSize = <usize>this.length << 1;\n    var size = originalSize;\n    while (size && isSpace(load<u16>(changetype<usize>(this) + size - 2))) {\n      size -= 2;\n    }\n    if (!size) return changetype<String>(\"\");\n    if (size == originalSize) return this;\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this), size);\n    return changetype<String>(out); // retains\n  }\n\n  padStart(length: i32, pad: string = \" \"): String {\n    var thisSize = <usize>this.length << 1;\n    var targetSize = <usize>length << 1;\n    var padSize = <usize>pad.length << 1;\n    if (targetSize < thisSize || !padSize) return this;\n    var prependSize = targetSize - thisSize;\n    var out = __alloc(targetSize, idof<String>());\n    if (prependSize > padSize) {\n      let repeatCount = (prependSize - 2) / padSize;\n      let restBase = repeatCount * padSize;\n      let restSize = prependSize - restBase;\n      memory.repeat(out, changetype<usize>(pad), padSize, repeatCount);\n      memory.copy(out + restBase, changetype<usize>(pad), restSize);\n    } else {\n      memory.copy(out, changetype<usize>(pad), prependSize);\n    }\n    memory.copy(out + prependSize, changetype<usize>(this), thisSize);\n    return changetype<String>(out); //  retains\n  }\n\n  padEnd(length: i32, pad: string = \" \"): String {\n    var thisSize = <usize>this.length << 1;\n    var targetSize = <usize>length << 1;\n    var padSize = <usize>pad.length << 1;\n    if (targetSize < thisSize || !padSize) return this;\n    var appendSize = targetSize - thisSize;\n    var out = __alloc(targetSize, idof<String>());\n    memory.copy(out, changetype<usize>(this), thisSize);\n    if (appendSize > padSize) {\n      let repeatCount = (appendSize - 2) / padSize;\n      let restBase = repeatCount * padSize;\n      let restSize = appendSize - restBase;\n      memory.repeat(out + thisSize, changetype<usize>(pad), padSize, repeatCount);\n      memory.copy(out + thisSize + restBase, changetype<usize>(pad), restSize);\n    } else {\n      memory.copy(out + thisSize, changetype<usize>(pad), appendSize);\n    }\n    return changetype<String>(out); // retains\n  }\n\n  repeat(count: i32 = 0): String {\n    var length = this.length;\n\n    // Most browsers can't handle strings 1 << 28 chars or longer\n    if (count < 0 || <u64>length * count > (1 << 28)) {\n      throw new RangeError(E_INVALIDLENGTH);\n    }\n\n    if (count == 0 || !length) return changetype<String>(\"\");\n    if (count == 1) return this;\n    var out = __alloc((length * count) << 1, idof<String>());\n    memory.repeat(out, changetype<usize>(this), <usize>length << 1, count);\n    return changetype<String>(out); // retains\n  }\n\n  replace(search: String, replacement: String): String {\n    var len: usize = this.length;\n    var slen: usize = search.length;\n    if (len <= slen) {\n      return len < slen ? this : select<String>(replacement, this, search == this);\n    }\n    var index: isize = this.indexOf(search);\n    if (~index) {\n      let rlen: usize = replacement.length;\n      len -= slen;\n      let olen = len + rlen;\n      if (olen) {\n        let out = __alloc(olen << 1, idof<String>());\n        memory.copy(out, changetype<usize>(this), index << 1);\n        memory.copy(\n          out + (index << 1),\n          changetype<usize>(replacement),\n          rlen << 1\n        );\n        memory.copy(\n          out + ((index + rlen) << 1),\n          changetype<usize>(this) + ((index + slen) << 1),\n          (len - index) << 1\n        );\n        return changetype<String>(out);\n      }\n    }\n    return this;\n  }\n\n  replaceAll(search: String, replacement: String): String {\n    var len: usize = this.length;\n    var slen: usize = search.length;\n    if (len <= slen) {\n      return len < slen ? this : select<String>(replacement, this, search == this);\n    }\n    var rlen: usize = replacement.length;\n    if (!slen) {\n      if (!rlen) return this;\n      // Special case: 'abc'.replaceAll('', '-') -> '-a-b-c-'\n      let out = __alloc((len + (len + 1) * rlen) << 1, idof<String>());\n      memory.copy(out, changetype<usize>(replacement), rlen << 1);\n      let offset = rlen;\n      for (let i: usize = 0; i < len; ++i) {\n        store<u16>(\n          changetype<usize>(out) + (offset++ << 1),\n          load<u16>(changetype<usize>(this) + (i << 1))\n        );\n        memory.copy(\n          out + (offset << 1),\n          changetype<usize>(replacement),\n          rlen << 1\n        );\n        offset += rlen;\n      }\n      return changetype<String>(out);\n    }\n    var prev: isize = 0, next: isize = 0;\n    if (slen == rlen) {\n      // Fast path when search and replacement have same length\n      let size = len << 1;\n      let out = __alloc(size, idof<String>());\n      memory.copy(out, changetype<usize>(this), size);\n      while (~(next = <isize>this.indexOf(search, <i32>prev))) {\n        memory.copy(out + (next << 1), changetype<usize>(replacement), rlen << 1);\n        prev = next + slen;\n      }\n      return changetype<String>(out);\n    }\n    var out: usize = 0, offset: usize = 0, resLen = len;\n    while (~(next = <isize>this.indexOf(search, <i32>prev))) {\n      if (!out) out = __alloc(len << 1, idof<String>());\n      if (offset > resLen) {\n        let newLength = resLen << 1;\n        out = __realloc(out, newLength << 1);\n        resLen = newLength;\n      }\n      let chunk = next - prev;\n      memory.copy(\n        out + (offset << 1),\n        changetype<usize>(this) + (prev << 1),\n        chunk << 1\n      );\n      offset += chunk;\n      memory.copy(\n        out + (offset << 1),\n        changetype<usize>(replacement),\n        rlen << 1\n      );\n      offset += rlen;\n      prev = next + slen;\n    }\n    if (offset) {\n      if (offset > resLen) {\n        let newLength = resLen << 1;\n        out = __realloc(out, newLength << 1);\n        resLen = newLength;\n      }\n      let rest = len - prev;\n      if (rest) {\n        memory.copy(\n          out + (offset << 1),\n          changetype<usize>(this) + (prev << 1),\n          rest << 1\n        );\n      }\n      rest += offset;\n      if (resLen > rest) out = __realloc(out, rest << 1);\n      return changetype<String>(out);\n    }\n    return this;\n  }\n\n  slice(start: i32, end: i32 = i32.MAX_VALUE): String {\n    var len = this.length;\n    start = start < 0 ? max(start + len, 0) : min(start, len);\n    end   = end   < 0 ? max(end   + len, 0) : min(end,   len);\n    len   = end - start;\n    if (len <= 0) return changetype<String>(\"\");\n    var out = __alloc(len << 1, idof<String>());\n    memory.copy(out, changetype<usize>(this) + (<usize>start << 1), <usize>len << 1);\n    return changetype<String>(out); // retains\n  }\n\n  split(separator: String | null = null, limit: i32 = i32.MAX_VALUE): String[] {\n    if (!limit) return changetype<Array<String>>(__allocArray(0, alignof<String>(), idof<Array<String>>())); // retains\n    if (separator === null) return <String[]>[this];\n    var length: isize = this.length;\n    var sepLen: isize = separator.length;\n    if (limit < 0) limit = i32.MAX_VALUE;\n    if (!sepLen) {\n      if (!length) return changetype<Array<String>>(__allocArray(0, alignof<String>(), idof<Array<String>>()));  // retains\n      // split by chars\n      length = min<isize>(length, <isize>limit);\n      let result = __allocArray(length, alignof<String>(), idof<Array<String>>());\n      let resultStart = changetype<ArrayBufferView>(result).dataStart;\n      for (let i: isize = 0; i < length; ++i) {\n        let charStr = __alloc(2, idof<String>());\n        store<u16>(charStr, load<u16>(changetype<usize>(this) + (<usize>i << 1)));\n        store<usize>(resultStart + (<usize>i << alignof<usize>()), charStr); // result[i] = charStr\n        if (isManaged<String>()) __retain(charStr);\n      }\n      return changetype<Array<String>>(result); // retains\n    } else if (!length) {\n      let result = __allocArray(1, alignof<String>(), idof<Array<String>>());\n      store<usize>(changetype<ArrayBufferView>(result).dataStart, changetype<usize>(\"\")); // static \"\"\n      return changetype<Array<String>>(result); // retains\n    }\n    var result = changetype<Array<String>>(__allocArray(0, alignof<String>(), idof<Array<String>>())); // retains\n    var end = 0, start = 0, i = 0;\n    while (~(end = this.indexOf(separator, start))) {\n      let len = end - start;\n      if (len > 0) {\n        let out = __alloc(<usize>len << 1, idof<String>());\n        memory.copy(out, changetype<usize>(this) + (<usize>start << 1), <usize>len << 1);\n        result.push(changetype<String>(out));\n      } else {\n        result.push(changetype<String>(\"\"));\n      }\n      if (++i == limit) return changetype<Array<String>>(result); // retains\n      start = end + sepLen;\n    }\n    if (!start) { // also means: loop above didn't do anything\n      result.push(this);\n      return changetype<Array<String>>(result); // retains\n    }\n    var len = length - start;\n    if (len > 0) {\n      let out = __alloc(<usize>len << 1, idof<String>());\n      memory.copy(out, changetype<usize>(this) + (<usize>start << 1), <usize>len << 1);\n      result.push(changetype<String>(out)); // retains\n    } else {\n      result.push(changetype<String>(\"\")); // static \"\"\n    }\n    return changetype<Array<String>>(result); // retains\n    // releases result\n  }\n\n  toString(): String {\n    return this;\n  }\n}\n\n// @ts-ignore: nolib\nexport type string = String;\n\nexport function parseInt(str: string, radix: i32 = 0): f64 {\n  return strtol<f64>(str, radix);\n}\n\nexport function parseFloat(str: string): f64 {\n  return strtod(str);\n}\n\n// Encoding helpers\nexport namespace String {\n\n  export namespace UTF8 {\n\n    export function byteLength(str: string, nullTerminated: bool = false): i32 {\n      var strOff = changetype<usize>(str);\n      var strEnd = strOff + <usize>changetype<BLOCK>(changetype<usize>(str) - BLOCK_OVERHEAD).rtSize;\n      var bufLen = nullTerminated ? 1 : 0;\n      while (strOff < strEnd) {\n        let c1 = <u32>load<u16>(strOff);\n        if (c1 < 128) {\n          if (nullTerminated && !c1) break;\n          bufLen += 1; strOff += 2;\n        } else if (c1 < 2048) {\n          bufLen += 2; strOff += 2;\n        } else {\n          if ((c1 & 0xFC00) == 0xD800 && strOff + 2 < strEnd) {\n            if ((<u32>load<u16>(strOff, 2) & 0xFC00) == 0xDC00) {\n              strOff += 4; bufLen += 4;\n              continue;\n            }\n          }\n          strOff += 2; bufLen += 3;\n        }\n      }\n      return bufLen;\n    }\n\n    export function encode(str: string, nullTerminated: bool = false): ArrayBuffer {\n      var strOff = changetype<usize>(str);\n      var strEnd = changetype<usize>(str) + <usize>changetype<BLOCK>(changetype<usize>(str) - BLOCK_OVERHEAD).rtSize;\n      var buf = __alloc(UTF8.byteLength(str, nullTerminated), idof<ArrayBuffer>());\n      var bufOff = buf;\n      while (strOff < strEnd) {\n        let c1 = <u32>load<u16>(strOff);\n        if (c1 < 128) {\n          if (nullTerminated && !c1) break;\n          store<u8>(bufOff, c1);\n          bufOff += 1; strOff += 2;\n        } else if (c1 < 2048) {\n          store<u8>(bufOff, c1 >> 6      | 192);\n          store<u8>(bufOff, c1      & 63 | 128, 1);\n          bufOff += 2; strOff += 2;\n        } else {\n          if ((c1 & 0xFC00) == 0xD800 && strOff + 2 < strEnd) {\n            let c2 = <u32>load<u16>(strOff, 2);\n            if ((c2 & 0xFC00) == 0xDC00) {\n              c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n              store<u8>(bufOff, c1 >> 18      | 240);\n              store<u8>(bufOff, c1 >> 12 & 63 | 128, 1);\n              store<u8>(bufOff, c1 >> 6  & 63 | 128, 2);\n              store<u8>(bufOff, c1       & 63 | 128, 3);\n              strOff += 4; bufOff += 4;\n              continue;\n            }\n          }\n          store<u8>(bufOff, c1 >> 12      | 224);\n          store<u8>(bufOff, c1 >> 6  & 63 | 128, 1);\n          store<u8>(bufOff, c1       & 63 | 128, 2);\n          strOff += 2; bufOff += 3;\n        }\n      }\n      if (nullTerminated) {\n        assert(strOff <= strEnd);\n        buf = __realloc(buf, bufOff - buf + 1);\n        store<u8>(bufOff, 0);\n      } else {\n        assert(strOff == strEnd);\n      }\n      return changetype<ArrayBuffer>(buf); // retains\n    }\n\n    export function decode(buf: ArrayBuffer, nullTerminated: bool = false): string {\n      return decodeUnsafe(changetype<usize>(buf), buf.byteLength, nullTerminated);\n    }\n\n    // @ts-ignore: decorator\n    @unsafe\n    export function decodeUnsafe(buf: usize, len: usize, nullTerminated: bool = false): string {\n      var bufOff = buf;\n      var bufEnd = buf + len;\n      assert(bufEnd >= bufOff); // guard wraparound\n      var str = __alloc(len << 1, idof<string>()); // max is one u16 char per u8 byte\n      var strOff = str;\n      while (bufOff < bufEnd) {\n        let cp = <u32>load<u8>(bufOff++);\n        if (cp < 128) {\n          if (nullTerminated && !cp) break;\n          store<u16>(strOff, cp);\n          strOff += 2;\n        } else if (cp > 191 && cp < 224) {\n          if (bufEnd - bufOff < 1) break;\n          store<u16>(strOff, (cp & 31) << 6 | load<u8>(bufOff++) & 63);\n          strOff += 2;\n        } else if (cp > 239 && cp < 365) {\n          if (bufEnd - bufOff < 3) break;\n          cp = (\n            (cp                  &  7) << 18 |\n            (load<u8>(bufOff)    & 63) << 12 |\n            (load<u8>(bufOff, 1) & 63) << 6  |\n             load<u8>(bufOff, 2) & 63\n          ) - 0x10000;\n          bufOff += 3;\n          store<u16>(strOff, 0xD800 + (cp >> 10));\n          store<u16>(strOff, 0xDC00 + (cp & 1023), 2);\n          strOff += 4;\n        } else {\n          if (bufEnd - bufOff < 2) break;\n          store<u16>(strOff,\n            (cp                  & 15) << 12 |\n            (load<u8>(bufOff)    & 63) << 6  |\n             load<u8>(bufOff, 1) & 63\n          );\n          bufOff += 2; strOff += 2;\n        }\n      }\n      return changetype<string>(__realloc(str, strOff - str)); // retains\n    }\n  }\n\n  export namespace UTF16 {\n\n    export function byteLength(str: string): i32 {\n      return changetype<BLOCK>(changetype<usize>(str) - BLOCK_OVERHEAD).rtSize;\n    }\n\n    export function encode(str: string): ArrayBuffer {\n      var size = changetype<BLOCK>(changetype<usize>(str) - BLOCK_OVERHEAD).rtSize;\n      var buf = __alloc(size, idof<ArrayBuffer>());\n      memory.copy(buf, changetype<usize>(str), <usize>size);\n      return changetype<ArrayBuffer>(buf); // retains\n    }\n\n    export function decode(buf: ArrayBuffer): string {\n      return decodeUnsafe(changetype<usize>(buf), buf.byteLength);\n    }\n\n    // @ts-ignore: decorator\n    @unsafe\n    export function decodeUnsafe(buf: usize, len: usize): string {\n      var str = __alloc(len &= ~1, idof<string>());\n      memory.copy(str, buf, len);\n      return changetype<string>(str); // retains\n    }\n  }\n}\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { BLOCK_MAXSIZE } from \"./rt/common\";\nimport { COMPARATOR, SORT } from \"./util/sort\";\nimport { ArrayBufferView } from \"./arraybuffer\";\nimport { joinBooleanArray, joinIntegerArray, joinFloatArray, joinStringArray, joinReferenceArray } from \"./util/string\";\nimport { idof, isArray as builtin_isArray } from \"./builtins\";\nimport { E_INDEXOUTOFRANGE, E_INVALIDLENGTH, E_EMPTYARRAY, E_HOLEYARRAY } from \"./util/error\";\n\n/** Ensures that the given array has _at least_ the specified backing size. */\nfunction ensureSize(array: usize, minSize: usize, alignLog2: u32): void {\n  var oldCapacity = changetype<ArrayBufferView>(array).byteLength;\n  if (minSize > <usize>oldCapacity >>> alignLog2) {\n    if (minSize > BLOCK_MAXSIZE >>> alignLog2) throw new RangeError(E_INVALIDLENGTH);\n    let oldData = changetype<usize>(changetype<ArrayBufferView>(array).buffer);\n    let newCapacity = minSize << alignLog2;\n    let newData = __realloc(oldData, newCapacity);\n    memory.fill(newData + oldCapacity, 0, newCapacity - oldCapacity);\n    if (newData !== oldData) { // oldData has been free'd\n      store<usize>(array, __retain(newData), offsetof<ArrayBufferView>(\"buffer\"));\n      store<usize>(array, newData, offsetof<ArrayBufferView>(\"dataStart\"));\n    }\n    store<u32>(array, newCapacity, offsetof<ArrayBufferView>(\"byteLength\"));\n  }\n}\n\nexport class Array<T> extends ArrayBufferView {\n  [key: number]: T;\n\n  // Implementing ArrayBufferView isn't strictly necessary here but is done to allow glue code\n  // to work with typed and normal arrays interchangeably. Technically, normal arrays do not need\n  // `dataStart` (equals `data`) and `dataLength` (equals computed `data.byteLength`).\n\n  // Also note that Array<T> with non-nullable T must guard against uninitialized null values\n  // whenever an element is accessed. Otherwise, the compiler wouldn't be able to guarantee\n  // type-safety anymore. For lack of a better word, such an array is \"holey\".\n\n  private length_: i32;\n\n  static isArray<U>(value: U): bool {\n    return builtin_isArray(value) && value !== null;\n  }\n\n  static create<T>(capacity: i32 = 0): Array<T> {\n    WARNING(\"'Array.create' is deprecated. Use 'new Array' instead, making sure initial elements are initialized.\");\n    var array = new Array<T>(capacity);\n    array.length = 0;\n    return array;\n  }\n\n  constructor(length: i32 = 0) {\n    super(length, alignof<T>());\n    this.length_ = length;\n  }\n\n  get length(): i32 {\n    return this.length_;\n  }\n\n  set length(newLength: i32) {\n    var oldLength = this.length_;\n    if (isManaged<T>()) {\n      if (oldLength > newLength) { // release no longer used refs\n        let dataStart = this.dataStart;\n        let cur = dataStart + (<usize>newLength << alignof<T>());\n        let end = dataStart + (<usize>oldLength << alignof<T>());\n        do __release(load<usize>(cur));\n        while ((cur += sizeof<T>()) < end);\n      } else {\n        ensureSize(changetype<usize>(this), newLength, alignof<T>());\n      }\n    } else {\n      ensureSize(changetype<usize>(this), newLength, alignof<T>());\n    }\n    this.length_ = newLength;\n  }\n\n  every(fn: (value: T, index: i32, array: Array<T>) => bool): bool {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (!fn(load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this)) return false;\n    }\n    return true;\n  }\n\n  findIndex(predicate: (value: T, index: i32, array: Array<T>) => bool): i32 {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (predicate(load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this)) return index;\n    }\n    return -1;\n  }\n\n  @operator(\"[]\") private __get(index: i32): T {\n    if (<u32>index >= <u32>this.length_) throw new RangeError(E_INDEXOUTOFRANGE);\n    var value = this.__unchecked_get(index);\n    if (isReference<T>()) {\n      if (!isNullable<T>()) {\n        if (!changetype<usize>(value)) throw new Error(E_HOLEYARRAY);\n      }\n    }\n    return value;\n  }\n\n  @unsafe @operator(\"{}\") private __unchecked_get(index: i32): T {\n    return load<T>(this.dataStart + (<usize>index << alignof<T>()));\n  }\n\n  @operator(\"[]=\") private __set(index: i32, value: T): void {\n    if (<u32>index >= <u32>this.length_) {\n      if (index < 0) throw new RangeError(E_INDEXOUTOFRANGE);\n      ensureSize(changetype<usize>(this), index + 1, alignof<T>());\n      this.length_ = index + 1;\n    }\n    this.__unchecked_set(index, value);\n  }\n\n  @unsafe @operator(\"{}=\") private __unchecked_set(index: i32, value: T): void {\n    if (isManaged<T>()) {\n      let offset = this.dataStart + (<usize>index << alignof<T>());\n      let oldRef = load<usize>(offset);\n      if (changetype<usize>(value) != oldRef) {\n        store<usize>(offset, __retain(changetype<usize>(value)));\n        __release(oldRef);\n      }\n    } else {\n      store<T>(this.dataStart + (<usize>index << alignof<T>()), value);\n    }\n  }\n\n  fill(value: T, start: i32 = 0, end: i32 = i32.MAX_VALUE): this {\n    var dataStart = this.dataStart;\n    var length = this.length_;\n    start = start < 0 ? max(length + start, 0) : min(start, length);\n    end   = end   < 0 ? max(length + end,   0) : min(end,   length);\n    if (isManaged<T>()) {\n      for (; start < end; ++start) {\n        let oldRef: usize = load<usize>(dataStart + (<usize>start << alignof<T>()));\n        if (changetype<usize>(value) != oldRef) {\n          store<usize>(dataStart + (<usize>start << alignof<T>()), __retain(changetype<usize>(value)));\n          __release(oldRef);\n        }\n      }\n    } else if (sizeof<T>() == 1) {\n      if (start < end) {\n        memory.fill(\n          dataStart + <usize>start,\n          u8(value),\n          <usize>(end - start)\n        );\n      }\n    } else {\n      for (; start < end; ++start) {\n        store<T>(dataStart + (<usize>start << alignof<T>()), value);\n      }\n    }\n    return this;\n  }\n\n  includes(value: T, fromIndex: i32 = 0): bool {\n    if (isFloat<T>()) {\n      let length = this.length_;\n      if (length == 0 || fromIndex >= length) return false;\n      if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n      let dataStart = this.dataStart;\n      while (fromIndex < length) {\n        let elem = load<T>(dataStart + (<usize>fromIndex << alignof<T>()));\n        // @ts-ignore\n        if (elem == value || isNaN(elem) & isNaN(value)) return true;\n        ++fromIndex;\n      }\n      return false;\n    } else {\n      return this.indexOf(value, fromIndex) >= 0;\n    }\n  }\n\n  indexOf(value: T, fromIndex: i32 = 0): i32 {\n    var length = this.length_;\n    if (length == 0 || fromIndex >= length) return -1;\n    if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n    var dataStart = this.dataStart;\n    while (fromIndex < length) {\n      if (load<T>(dataStart + (<usize>fromIndex << alignof<T>())) == value) return fromIndex;\n      ++fromIndex;\n    }\n    return -1;\n  }\n\n  lastIndexOf(value: T, fromIndex: i32 = this.length_): i32 {\n    var length = this.length_;\n    if (length == 0) return -1;\n    if (fromIndex < 0) fromIndex = length + fromIndex;\n    else if (fromIndex >= length) fromIndex = length - 1;\n    var dataStart = this.dataStart;\n    while (fromIndex >= 0) {\n      if (load<T>(dataStart + (<usize>fromIndex << alignof<T>())) == value) return fromIndex;\n      --fromIndex;\n    }\n    return -1;\n  }\n\n  push(value: T): i32 {\n    var length = this.length_;\n    var newLength = length + 1;\n    ensureSize(changetype<usize>(this), newLength, alignof<T>());\n    if (isManaged<T>()) {\n      store<usize>(this.dataStart + (<usize>length << alignof<T>()), __retain(changetype<usize>(value)));\n    } else {\n      store<T>(this.dataStart + (<usize>length << alignof<T>()), value);\n    }\n    this.length_ = newLength;\n    return newLength;\n  }\n\n  concat(other: Array<T>): Array<T> {\n    var thisLen = this.length_;\n    var otherLen = select(0, other.length_, other === null);\n    var outLen = thisLen + otherLen;\n    if (<u32>outLen > <u32>BLOCK_MAXSIZE >>> alignof<T>()) throw new Error(E_INVALIDLENGTH);\n    var out = changetype<Array<T>>(__allocArray(outLen, alignof<T>(), idof<Array<T>>())); // retains\n    var outStart = out.dataStart;\n    var thisSize = <usize>thisLen << alignof<T>();\n    if (isManaged<T>()) {\n      let thisStart = this.dataStart;\n      for (let offset: usize = 0; offset < thisSize; offset += sizeof<T>()) {\n        let ref = load<usize>(thisStart + offset);\n        store<usize>(outStart + offset, __retain(ref));\n      }\n      outStart += thisSize;\n      let otherStart = other.dataStart;\n      let otherSize = <usize>otherLen << alignof<T>();\n      for (let offset: usize = 0; offset < otherSize; offset += sizeof<T>()) {\n        let ref = load<usize>(otherStart + offset);\n        store<usize>(outStart + offset, __retain(ref));\n      }\n    } else {\n      memory.copy(outStart, this.dataStart, thisSize);\n      memory.copy(outStart + thisSize, other.dataStart, <usize>otherLen << alignof<T>());\n    }\n    return out;\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): this {\n    var dataStart = this.dataStart;\n    var len = this.length_;\n\n        end   = min<i32>(end, len);\n    var to    = target < 0 ? max(len + target, 0) : min(target, len);\n    var from  = start < 0 ? max(len + start, 0) : min(start, len);\n    var last  = end < 0 ? max(len + end, 0) : min(end, len);\n    var count = min(last - from, len - to);\n\n    if (isManaged<T>()) {\n      if (from < to && to < (from + count)) { // right to left\n        from += count - 1;\n        to   += count - 1;\n        while (count) {\n          let oldRef: usize = load<usize>(dataStart + (<usize>to << alignof<T>()));\n          let newRef: usize = load<usize>(dataStart + (<usize>from << alignof<T>()));\n          if (newRef != oldRef) {\n            store<usize>(dataStart + (<usize>to << alignof<T>()), __retain(newRef));\n            __release(oldRef);\n          }\n          --from, --to, --count;\n        }\n      } else { // left to right\n        while (count) {\n          let oldRef: usize = load<usize>(dataStart + (<usize>to << alignof<T>()));\n          let newRef: usize = load<usize>(dataStart + (<usize>from << alignof<T>()));\n          if (newRef != oldRef) {\n            store<usize>(dataStart + (<usize>to << alignof<T>()), __retain(newRef));\n            __release(oldRef);\n          }\n          ++from, ++to, --count;\n        }\n      }\n    } else {\n      memory.copy( // is memmove\n        dataStart + (<usize>to << alignof<T>()),\n        dataStart + (<usize>from << alignof<T>()),\n        <usize>count << alignof<T>()\n      );\n    }\n    return this;\n  }\n\n  pop(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(E_EMPTYARRAY);\n    var element = load<T>(this.dataStart + (<usize>(--length) << alignof<T>()));\n    this.length_ = length;\n    return element; // no need to retain -> is moved\n  }\n\n  forEach(fn: (value: T, index: i32, array: Array<T>) => void): void {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      fn(load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this);\n    }\n  }\n\n  map<U>(fn: (value: T, index: i32, array: Array<T>) => U): Array<U> {\n    var length = this.length_;\n    var out = changetype<Array<U>>(__allocArray(length, alignof<U>(), idof<Array<U>>())); // retains\n    var outStart = out.dataStart;\n    for (let index = 0; index < min(length, this.length_); ++index) {\n      let result = fn(load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this); // retains\n      if (isManaged<U>()) {\n        store<usize>(outStart + (<usize>index << alignof<U>()), __retain(changetype<usize>(result)));\n      } else {\n        store<U>(outStart + (<usize>index << alignof<U>()), result);\n      }\n      // releases result\n    }\n    return out;\n  }\n\n  filter(fn: (value: T, index: i32, array: Array<T>) => bool): Array<T> {\n    var result = changetype<Array<T>>(__allocArray(0, alignof<T>(), idof<Array<T>>())); // retains\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      let value = load<T>(this.dataStart + (<usize>index << alignof<T>()));\n      if (fn(value, index, this)) result.push(value);\n    }\n    return result;\n  }\n\n  reduce<U>(\n    fn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      accum = fn(accum, load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this);\n    }\n    return accum;\n  }\n\n  reduceRight<U>(\n    fn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    for (let index = this.length_ - 1; index >= 0; --index) {\n      accum = fn(accum, load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this);\n    }\n    return accum;\n  }\n\n  shift(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(E_EMPTYARRAY);\n    var base = this.dataStart;\n    var element = load<T>(base);\n    var lastIndex = length - 1;\n    memory.copy(\n      base,\n      base + sizeof<T>(),\n      <usize>lastIndex << alignof<T>()\n    );\n    store<T>(base + (<usize>lastIndex << alignof<T>()),\n      // @ts-ignore: cast\n      <T>null\n    );\n    this.length_ = lastIndex;\n    return element; // no need to retain -> is moved\n  }\n\n  some(fn: (value: T, index: i32, array: Array<T>) => bool): bool {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (fn(load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this)) return true;\n    }\n    return false;\n  }\n\n  unshift(value: T): i32 {\n    var newLength = this.length_ + 1;\n    ensureSize(changetype<usize>(this), newLength, alignof<T>());\n    var dataStart = this.dataStart;\n    memory.copy(\n      dataStart + sizeof<T>(),\n      dataStart,\n      <usize>(newLength - 1) << alignof<T>()\n    );\n    if (isManaged<T>()) {\n      store<usize>(dataStart, __retain(changetype<usize>(value)));\n    } else {\n      store<T>(dataStart, value);\n    }\n    this.length_ = newLength;\n    return newLength;\n  }\n\n  slice(start: i32 = 0, end: i32 = i32.MAX_VALUE): Array<T> {\n    var length = this.length_;\n    start = start < 0 ? max(start + length, 0) : min(start, length);\n    end   = end   < 0 ? max(end   + length, 0) : min(end  , length);\n    length = max(end - start, 0);\n    var slice = changetype<Array<T>>(__allocArray(length, alignof<T>(), idof<Array<T>>())); // retains\n    var sliceBase = slice.dataStart;\n    var thisBase = this.dataStart + (<usize>start << alignof<T>());\n    if (isManaged<T>()) {\n      let off = <usize>0;\n      let end = <usize>length << alignof<usize>();\n      while (off < end) {\n        let ref = load<usize>(thisBase + off);\n        store<usize>(sliceBase + off, __retain(ref));\n        off += sizeof<usize>();\n      }\n    } else {\n      memory.copy(sliceBase, thisBase, length << alignof<T>());\n    }\n    return slice;\n  }\n\n  splice(start: i32, deleteCount: i32 = i32.MAX_VALUE): Array<T> {\n    var length  = this.length_;\n    start       = start < 0 ? max<i32>(length + start, 0) : min<i32>(start, length);\n    deleteCount = max<i32>(min<i32>(deleteCount, length - start), 0);\n    var result = changetype<Array<T>>(__allocArray(deleteCount, alignof<T>(), idof<Array<T>>())); // retains\n    var resultStart = result.dataStart;\n    var thisStart = this.dataStart;\n    var thisBase  = thisStart + (<usize>start << alignof<T>());\n    // no need to retain -> is moved\n    memory.copy(\n      resultStart,\n      thisBase,\n      <usize>deleteCount << alignof<T>()\n    );\n    var offset = start + deleteCount;\n    if (length != offset) {\n      memory.copy(\n        thisBase,\n        thisStart + (<usize>offset << alignof<T>()),\n        <usize>(length - offset) << alignof<T>()\n      );\n    }\n    this.length_ = length - deleteCount;\n    return result;\n  }\n\n  reverse(): Array<T> {\n    var length = this.length_;\n    if (length) {\n      let front = this.dataStart;\n      let back = this.dataStart + (<usize>(length - 1) << alignof<T>());\n      while (front < back) {\n        let temp = load<T>(front);\n        store<T>(front, load<T>(back));\n        store<T>(back, temp);\n        front += sizeof<T>();\n        back -= sizeof<T>();\n      }\n    }\n    return this;\n  }\n\n  sort(comparator: (a: T, b: T) => i32 = COMPARATOR<T>()): this {\n    var length = this.length_;\n    if (length <= 1) return this;\n    var base = this.dataStart;\n    if (length == 2) {\n      let a: T = load<T>(base, sizeof<T>()); // a = arr[1]\n      let b: T = load<T>(base); // b = arr[0]\n      if (comparator(a, b) < 0) {\n        store<T>(base, b, sizeof<T>()); // arr[1] = b;\n        store<T>(base, a); // arr[0] = a;\n      }\n      return this;\n    }\n    SORT<T>(base, length, comparator);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    var dataStart = this.dataStart;\n    var length = this.length_;\n    if (isBoolean<T>())   return joinBooleanArray(dataStart, length, separator);\n    if (isInteger<T>())   return joinIntegerArray<T>(dataStart, length, separator);\n    if (isFloat<T>())     return joinFloatArray<T>(dataStart, length, separator);\n\n    if (ASC_SHRINK_LEVEL < 1) {\n      if (isString<T>())  return joinStringArray(dataStart, length, separator);\n    }\n    // For rest objects and arrays use general join routine\n    if (isReference<T>()) return joinReferenceArray<T>(dataStart, length, separator);\n    ERROR(\"unspported element type\");\n    return <string>unreachable();\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  // RT integration\n\n  @unsafe private __visit_impl(cookie: u32): void {\n    if (isManaged<T>()) {\n      let cur = this.dataStart;\n      let end = cur + (<usize>this.length_ << alignof<T>());\n      while (cur < end) {\n        let val = load<usize>(cur);\n        if (val) __visit(val, cookie);\n        cur += sizeof<usize>();\n      }\n    }\n    // automatically visits ArrayBufferView (.buffer) next\n  }\n}\n","// Common error messages for use accross the standard library. Keeping error messages compact\n// and reusing them where possible ensures minimal static data in binaries.\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_INDEXOUTOFRANGE: string = \"Index out of range\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_INVALIDLENGTH: string = \"Invalid length\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_EMPTYARRAY: string = \"Array is empty\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_HOLEYARRAY: string = \"Element type must be nullable if array is holey\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_NOTIMPLEMENTED: string = \"Not implemented\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_KEYNOTFOUND: string = \"Key does not exist\";\n","export function bswap<T extends number>(value: T): T {\n  if (isInteger<T>()) {\n    if (sizeof<T>() == 2) {\n      return <T>((value << 8) | ((value >> 8) & <T>0x00FF));\n    }\n    if (sizeof<T>() == 4) {\n      return <T>(\n        rotl<u32>(<u32>value & 0xFF00FF00, 8) |\n        rotr<u32>(<u32>value & 0x00FF00FF, 8)\n      );\n    }\n    if (sizeof<T>() == 8) {\n      let a = (<u64>value >> 8) & 0x00FF00FF00FF00FF;\n      let b = (<u64>value & 0x00FF00FF00FF00FF) << 8;\n      let v = a | b;\n\n      a = (v >> 16) & 0x0000FFFF0000FFFF;\n      b = (v & 0x0000FFFF0000FFFF) << 16;\n\n      return <T>rotr<u64>(a | b, 32);\n    }\n    return value;\n  }\n  assert(false);\n  return value;\n}\n\nexport function bswap16<T extends number>(value: T): T {\n  if (isInteger<T>() && sizeof<T>() <= 4) {\n    if (sizeof<T>() == 2) {\n      return <T>((value << 8) | ((value >> 8) & <T>0x00FF));\n    } else if (sizeof<T>() == 4) {\n      return <T>(((value << 8) & <T>0xFF00) | ((value >> 8) & <T>0x00FF) | (value & <T>0xFFFF0000));\n    }\n    return value;\n  }\n  assert(false);\n  return value;\n}\n","import { COMPARATOR, SORT as SORT_IMPL } from \"./util/sort\";\nimport { E_INDEXOUTOFRANGE, E_INVALIDLENGTH } from \"./util/error\";\nimport { joinIntegerArray, joinFloatArray } from \"./util/string\";\nimport { idof } from \"./builtins\";\nimport { ArrayBufferView } from \"./arraybuffer\";\n\nexport class Int8Array extends ArrayBufferView {\n  [key: number]: i8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i8>();\n\n  constructor(length: i32) {\n    super(length, alignof<i8>());\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i8 {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i8>(this.dataStart + <usize>index);\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i8 {\n    return load<i8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<i8>): void {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i8>(this.dataStart + <usize>index, value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<i8>): void {\n    store<i8>(this.dataStart + <usize>index, value);\n  }\n\n  includes(searchElement: i8, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int8Array, i8>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i8, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int8Array, i8>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i8, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int8Array, i8>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return FILL<Int8Array, i8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i8, b: i8) => i32 = COMPARATOR<i8>()): Int8Array {\n    return SORT<Int8Array, i8>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return SLICE<Int8Array, i8>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return SUBARRAY<Int8Array, i8>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int8Array {\n    return COPY_WITHIN<Int8Array, i8>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int8Array, i8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int8Array, i8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i8, index: i32, self: Int8Array) => i8): Int8Array {\n    return MAP<Int8Array, i8>(this, fn);\n  }\n\n  filter(fn: (value: i8, index: i32, self: Int8Array) => bool): Int8Array {\n    return FILTER<Int8Array, i8>(this, fn);\n  }\n\n  findIndex(fn: (value: i8, index: i32, self: Int8Array) => bool): i32 {\n    return FIND_INDEX<Int8Array, i8>(this, fn);\n  }\n\n  some(fn: (value: i8, index: i32, self: Int8Array) => bool): bool {\n    return SOME<Int8Array, i8>(this, fn);\n  }\n\n  every(fn: (value: i8, index: i32, self: Int8Array) => bool): bool {\n    return EVERY<Int8Array, i8>(this, fn);\n  }\n\n  forEach(fn: (value: i8, index: i32, self: Int8Array) => void): void {\n    FOREACH<Int8Array, i8>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i8>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i8>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int8Array {\n    return WRAP<Int8Array, i8>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint8Array extends ArrayBufferView {\n  [key: number]: u8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u8>();\n\n  constructor(length: i32) {\n    super(length, alignof<u8>());\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u8 {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u8 {\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<u8>): void {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u8>(this.dataStart + <usize>index, value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<u8>): void {\n    store<u8>(this.dataStart + <usize>index, value);\n  }\n\n  includes(searchElement: u8, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint8Array, u8>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u8, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint8Array, u8>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u8, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint8Array, u8>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return FILL<Uint8Array, u8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8Array {\n    return SORT<Uint8Array, u8>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return SLICE<Uint8Array, u8>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return SUBARRAY<Uint8Array, u8>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return COPY_WITHIN<Uint8Array, u8>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8Array, u8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8Array, u8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u8, index: i32, self: Uint8Array) => u8): Uint8Array {\n    return MAP<Uint8Array, u8>(this, fn);\n  }\n\n  filter(fn: (value: u8, index: i32, self: Uint8Array) => bool): Uint8Array {\n    return FILTER<Uint8Array, u8>(this, fn);\n  }\n\n  findIndex(fn: (value: u8, index: i32, self: Uint8Array) => bool): i32 {\n    return FIND_INDEX<Uint8Array, u8>(this, fn);\n  }\n\n  some(fn: (value: u8, index: i32, self: Uint8Array) => bool): bool {\n    return SOME<Uint8Array, u8>(this, fn);\n  }\n\n  every(fn: (value: u8, index: i32, self: Uint8Array) => bool): bool {\n    return EVERY<Uint8Array, u8>(this, fn);\n  }\n\n  forEach(fn: (value: u8, index: i32, self: Uint8Array) => void): void {\n    FOREACH<Uint8Array, u8>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u8>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u8>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint8Array {\n    return WRAP<Uint8Array, u8>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint8ClampedArray extends ArrayBufferView {\n  [key: number]: u8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u8>();\n\n  constructor(length: i32) {\n    super(length, alignof<u8>());\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u8 {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u8 {\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<u8>): void {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u8>(this.dataStart + <usize>index, ~(<i32>value >> 31) & (((255 - value) >> 31) | value));\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<u8>): void {\n    store<u8>(this.dataStart + <usize>index, ~(<i32>value >> 31) & (((255 - value) >> 31) | value));\n  }\n\n  includes(searchElement: u8, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint8ClampedArray, u8>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u8, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint8ClampedArray, u8>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u8, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint8ClampedArray, u8>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return FILL<Uint8ClampedArray, u8>(this, value, start, end);\n  }\n\n  sort(fn: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8ClampedArray {\n    return SORT<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return SLICE<Uint8ClampedArray, u8>(this, begin, end);\n  }\n\n  subarray(start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return SUBARRAY<Uint8ClampedArray, u8>(this, start, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return COPY_WITHIN<Uint8ClampedArray, u8>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8ClampedArray) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8ClampedArray, u8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8ClampedArray) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8ClampedArray, u8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u8, index: i32, self: Uint8ClampedArray) => u8): Uint8ClampedArray {\n    return MAP<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  filter(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): Uint8ClampedArray {\n    return FILTER<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  findIndex(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): i32 {\n    return FIND_INDEX<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  some(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): bool {\n    return SOME<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  every(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): bool {\n    return EVERY<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  forEach(fn: (value: u8, index: i32, self: Uint8ClampedArray) => void): void {\n    FOREACH<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u8>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u8>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint8ClampedArray {\n    return WRAP<Uint8ClampedArray, u8>(buffer, byteOffset, length);\n  }\n}\n\nexport class Int16Array extends ArrayBufferView {\n  [key: number]: i16;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i16>();\n\n  constructor(length: i32) {\n    super(length, alignof<i16>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i16>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i16 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i16>(this.dataStart + (<usize>index << alignof<i16>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i16 {\n    return load<i16>(this.dataStart + (<usize>index << alignof<i16>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<i16>): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i16>(this.dataStart + (<usize>index << alignof<i16>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<i16>): void {\n    store<i16>(this.dataStart + (<usize>index << alignof<i16>()), value);\n  }\n\n  includes(searchElement: i16, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int16Array, i16>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i16, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int16Array, i16>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i16, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int16Array, i16>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return FILL<Int16Array, i16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i16, b: i16) => i32 = COMPARATOR<i16>()): Int16Array {\n    return SORT<Int16Array, i16>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return SLICE<Int16Array, i16>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return SUBARRAY<Int16Array, i16>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int16Array {\n    return COPY_WITHIN<Int16Array, i16>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int16Array, i16, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int16Array, i16, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i16, index: i32, self: Int16Array) => i16): Int16Array {\n    return MAP<Int16Array, i16>(this, fn);\n  }\n\n  filter(fn: (value: i16, index: i32, self: Int16Array) => bool): Int16Array {\n    return FILTER<Int16Array, i16>(this, fn);\n  }\n\n  findIndex(fn: (value: i16, index: i32, self: Int16Array) => bool): i32 {\n    return FIND_INDEX<Int16Array, i16>(this, fn);\n  }\n\n  some(fn: (value: i16, index: i32, self: Int16Array) => bool): bool {\n    return SOME<Int16Array, i16>(this, fn);\n  }\n\n  every(fn: (value: i16, index: i32, self: Int16Array) => bool): bool {\n    return EVERY<Int16Array, i16>(this, fn);\n  }\n\n  forEach(fn: (value: i16, index: i32, self: Int16Array) => void): void {\n    FOREACH<Int16Array, i16>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i16>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i16>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int16Array {\n    return WRAP<Int16Array, i16>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint16Array extends ArrayBufferView {\n  [key: number]: u16;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u16>();\n\n  constructor(length: i32) {\n    super(length, alignof<u16>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u16>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u16 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u16>(this.dataStart + (<usize>index << alignof<u16>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u16 {\n    return load<u16>(this.dataStart + (<usize>index << alignof<u16>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<u16>): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u16>(this.dataStart + (<usize>index << alignof<u16>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<u16>): void {\n    store<u16>(this.dataStart + (<usize>index << alignof<u16>()), value);\n  }\n\n  includes(searchElement: u16, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint16Array, u16>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u16, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint16Array, u16>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u16, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint16Array, u16>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return FILL<Uint16Array, u16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u16, b: u16) => i32 = COMPARATOR<u16>()): Uint16Array {\n    return SORT<Uint16Array, u16>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return SLICE<Uint16Array, u16>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return SUBARRAY<Uint16Array, u16>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return COPY_WITHIN<Uint16Array, u16>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint16Array, u16, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint16Array, u16, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u16, index: i32, self: Uint16Array) => u16): Uint16Array {\n    return MAP<Uint16Array, u16>(this, fn);\n  }\n\n  filter(fn: (value: u16, index: i32, self: Uint16Array) => bool): Uint16Array {\n    return FILTER<Uint16Array, u16>(this, fn);\n  }\n\n  findIndex(fn: (value: u16, index: i32, self: Uint16Array) => bool): i32 {\n    return FIND_INDEX<Uint16Array, u16>(this, fn);\n  }\n\n  some(fn: (value: u16, index: i32, self: Uint16Array) => bool): bool {\n    return SOME<Uint16Array, u16>(this, fn);\n  }\n\n  every(fn: (value: u16, index: i32, self: Uint16Array) => bool): bool {\n    return EVERY<Uint16Array, u16>(this, fn);\n  }\n\n  forEach(fn: (value: u16, index: i32, self: Uint16Array) => void): void {\n    FOREACH<Uint16Array, u16>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u16>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u16>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint16Array {\n    return WRAP<Uint16Array, u16>(buffer, byteOffset, length);\n  }\n}\n\nexport class Int32Array extends ArrayBufferView {\n  [key: number]: i32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i32>();\n\n  constructor(length: i32) {\n    super(length, alignof<i32>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i32>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i32 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i32>(this.dataStart + (<usize>index << alignof<i32>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i32 {\n    return load<i32>(this.dataStart + (<usize>index << alignof<i32>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: i32): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i32>(this.dataStart + (<usize>index << alignof<i32>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: i32): void {\n    store<i32>(this.dataStart + (<usize>index << alignof<i32>()), value);\n  }\n\n  includes(searchElement: i32, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int32Array, i32>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i32, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int32Array, i32>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i32, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int32Array, i32>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return FILL<Int32Array, i32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i32, b: i32) => i32 = COMPARATOR<i32>()): Int32Array {\n    return SORT<Int32Array, i32>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return SLICE<Int32Array, i32>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return SUBARRAY<Int32Array, i32>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int32Array {\n    return COPY_WITHIN<Int32Array, i32>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int32Array, i32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int32Array, i32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i32, index: i32, self: Int32Array) => i32): Int32Array {\n    return MAP<Int32Array, i32>(this, fn);\n  }\n\n  filter(fn: (value: i32, index: i32, self: Int32Array) => bool): Int32Array {\n    return FILTER<Int32Array, i32>(this, fn);\n  }\n\n  findIndex(fn: (value: i32, index: i32, self: Int32Array) => bool): i32 {\n    return FIND_INDEX<Int32Array, i32>(this, fn);\n  }\n\n  some(fn: (value: i32, index: i32, self: Int32Array) => bool): bool {\n    return SOME<Int32Array, i32>(this, fn);\n  }\n\n  every(fn: (value: i32, index: i32, self: Int32Array) => bool): bool {\n    return EVERY<Int32Array, i32>(this, fn);\n  }\n\n  forEach(fn: (value: i32, index: i32, self: Int32Array) => void): void {\n    FOREACH<Int32Array, i32>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i32>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i32>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int32Array {\n    return WRAP<Int32Array, i32>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint32Array extends ArrayBufferView {\n  [key: number]: u32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u32>();\n\n  constructor(length: i32) {\n    super(length, alignof<u32>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u32>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u32 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u32>(this.dataStart + (<usize>index << alignof<u32>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u32 {\n    return load<u32>(this.dataStart + (<usize>index << alignof<u32>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: u32): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u32>(this.dataStart + (<usize>index << alignof<u32>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: u32): void {\n    store<u32>(this.dataStart + (<usize>index << alignof<u32>()), value);\n  }\n\n  includes(searchElement: u32, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint32Array, u32>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u32, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint32Array, u32>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u32, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint32Array, u32>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return FILL<Uint32Array, u32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u32, b: u32) => i32 = COMPARATOR<u32>()): Uint32Array {\n    return SORT<Uint32Array, u32>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return SLICE<Uint32Array, u32>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return SUBARRAY<Uint32Array, u32>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return COPY_WITHIN<Uint32Array, u32>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint32Array, u32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint32Array, u32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u32, index: i32, self: Uint32Array) => u32): Uint32Array {\n    return MAP<Uint32Array, u32>(this, fn);\n  }\n\n  filter(fn: (value: u32, index: i32, self: Uint32Array) => bool): Uint32Array {\n    return FILTER<Uint32Array, u32>(this, fn);\n  }\n\n  findIndex(fn: (value: u32, index: i32, self: Uint32Array) => bool): i32 {\n    return FIND_INDEX<Uint32Array, u32>(this, fn);\n  }\n\n  some(fn: (value: u32, index: i32, self: Uint32Array) => bool): bool {\n    return SOME<Uint32Array, u32>(this, fn);\n  }\n\n  every(fn: (value: u32, index: i32, self: Uint32Array) => bool): bool {\n    return EVERY<Uint32Array, u32>(this, fn);\n  }\n\n  forEach(fn: (value: u32, index: i32, self: Uint32Array) => void): void {\n    FOREACH<Uint32Array, u32>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u32>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u32>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint32Array {\n    return WRAP<Uint32Array, u32>(buffer, byteOffset, length);\n  }\n}\n\nexport class Int64Array extends ArrayBufferView {\n  [key: number]: i64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i64>();\n\n  constructor(length: i32) {\n    super(length, alignof<i64>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i64>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i64 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i64>(this.dataStart + (<usize>index << alignof<i64>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i64 {\n    return load<i64>(this.dataStart + (<usize>index << alignof<i64>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: i64): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i64>(this.dataStart + (<usize>index << alignof<i64>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: i64): void {\n    store<i64>(this.dataStart + (<usize>index << alignof<i64>()), value);\n  }\n\n  includes(searchElement: i64, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int64Array, i64>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i64, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int64Array, i64>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i64, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int64Array, i64>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return FILL<Int64Array, i64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i64, b: i64) => i32 = COMPARATOR<i64>()): Int64Array {\n    return SORT<Int64Array, i64>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return SLICE<Int64Array, i64>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return SUBARRAY<Int64Array, i64>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int64Array {\n    return COPY_WITHIN<Int64Array, i64>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int64Array, i64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int64Array, i64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i64, index: i32, self: Int64Array) => i64): Int64Array {\n    return MAP<Int64Array, i64>(this, fn);\n  }\n\n  filter(fn: (value: i64, index: i32, self: Int64Array) => bool): Int64Array {\n    return FILTER<Int64Array, i64>(this, fn);\n  }\n\n  findIndex(fn: (value: i64, index: i32, self: Int64Array) => bool): i32 {\n    return FIND_INDEX<Int64Array, i64>(this, fn);\n  }\n\n  some(fn: (value: i64, index: i32, self: Int64Array) => bool): bool {\n    return SOME<Int64Array, i64>(this, fn);\n  }\n\n  every(fn: (value: i64, index: i32, self: Int64Array) => bool): bool {\n    return EVERY<Int64Array, i64>(this, fn);\n  }\n\n  forEach(fn: (value: i64, index: i32, self: Int64Array) => void): void {\n    FOREACH<Int64Array, i64>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i64>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i64>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int64Array {\n    return WRAP<Int64Array, i64>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint64Array extends ArrayBufferView {\n  [key: number]: u64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u64>();\n\n  constructor(length: i32) {\n    super(length, alignof<u64>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u64>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u64 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u64>(this.dataStart + (<usize>index << alignof<u64>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u64 {\n    return load<u64>(this.dataStart + (<usize>index << alignof<u64>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: u64): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u64>(this.dataStart + (<usize>index << alignof<u64>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: u64): void {\n    store<u64>(this.dataStart + (<usize>index << alignof<u64>()), value);\n  }\n\n  includes(searchElement: u64, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint64Array, u64>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u64, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint64Array, u64>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u64, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint64Array, u64>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return FILL<Uint64Array, u64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u64, b: u64) => i32 = COMPARATOR<u64>()): Uint64Array {\n    return SORT<Uint64Array, u64>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return SLICE<Uint64Array, u64>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return SUBARRAY<Uint64Array, u64>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return COPY_WITHIN<Uint64Array, u64>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint64Array, u64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint64Array, u64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u64, index: i32, self: Uint64Array) => u64): Uint64Array {\n    return MAP<Uint64Array, u64>(this, fn);\n  }\n\n  filter(fn: (value: u64, index: i32, self: Uint64Array) => bool): Uint64Array {\n    return FILTER<Uint64Array, u64>(this, fn);\n  }\n\n  findIndex(fn: (value: u64, index: i32, self: Uint64Array) => bool): i32 {\n    return FIND_INDEX<Uint64Array, u64>(this, fn);\n  }\n\n  some(fn: (value: u64, index: i32, self: Uint64Array) => bool): bool {\n    return SOME<Uint64Array, u64>(this, fn);\n  }\n\n  every(fn: (value: u64, index: i32, self: Uint64Array) => bool): bool {\n    return EVERY<Uint64Array, u64>(this, fn);\n  }\n\n  forEach(fn: (value: u64, index: i32, self: Uint64Array) => void): void {\n    FOREACH<Uint64Array, u64>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u64>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u64>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint64Array {\n    return WRAP<Uint64Array, u64>(buffer, byteOffset, length);\n  }\n}\n\nexport class Float32Array extends ArrayBufferView {\n  [key: number]: f32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<f32>();\n\n  constructor(length: i32) {\n    super(length, alignof<f32>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<f32>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): f32 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<f32>(this.dataStart + (<usize>index << alignof<f32>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): f32 {\n    return load<f32>(this.dataStart + (<usize>index << alignof<f32>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: f32): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<f32>(this.dataStart + (<usize>index << alignof<f32>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: f32): void {\n    store<f32>(this.dataStart + (<usize>index << alignof<f32>()), value);\n  }\n\n  includes(searchElement: f32, fromIndex: i32 = 0): bool {\n    return INCLUDES<Float32Array, f32>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: f32, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Float32Array, f32>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: f32, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Float32Array, f32>(this, searchElement, fromIndex);\n  }\n\n  fill(value: f32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return FILL<Float32Array, f32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f32, b: f32) => i32 = COMPARATOR<f32>()): Float32Array {\n    return SORT<Float32Array, f32>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return SLICE<Float32Array, f32>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return SUBARRAY<Float32Array, f32>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Float32Array {\n    return COPY_WITHIN<Float32Array, f32>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float32Array, f32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float32Array, f32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: f32, index: i32, self: Float32Array) => f32): Float32Array {\n    return MAP<Float32Array, f32>(this, fn);\n  }\n\n  filter(fn: (value: f32, index: i32, self: Float32Array) => bool): Float32Array {\n    return FILTER<Float32Array, f32>(this, fn);\n  }\n\n  findIndex(fn: (value: f32, index: i32, self: Float32Array) => bool): i32 {\n    return FIND_INDEX<Float32Array, f32>(this, fn);\n  }\n\n  some(fn: (value: f32, index: i32, self: Float32Array) => bool): bool {\n    return SOME<Float32Array, f32>(this, fn);\n  }\n\n  every(fn: (value: f32, index: i32, self: Float32Array) => bool): bool {\n    return EVERY<Float32Array, f32>(this, fn);\n  }\n\n  forEach(fn: (value: f32, index: i32, self: Float32Array) => void): void {\n    FOREACH<Float32Array, f32>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, f32>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinFloatArray<f32>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Float32Array {\n    return WRAP<Float32Array, f32>(buffer, byteOffset, length);\n  }\n}\n\nexport class Float64Array extends ArrayBufferView {\n  [key: number]: f64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<f64>();\n\n  constructor(length: i32) {\n    super(length, alignof<f64>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<f64>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): f64 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<f64>(this.dataStart + (<usize>index << alignof<f64>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): f64 {\n    return load<f64>(this.dataStart + (<usize>index << alignof<f64>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: f64): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<f64>(this.dataStart + (<usize>index << alignof<f64>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: f64): void {\n    store<f64>(this.dataStart + (<usize>index << alignof<f64>()), value);\n  }\n\n  includes(searchElement: f64, fromIndex: i32 = 0): bool {\n    return INCLUDES<Float64Array, f64>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: f64, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Float64Array, f64>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: f64, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Float64Array, f64>(this, searchElement, fromIndex);\n  }\n\n  fill(value: f64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return FILL<Float64Array, f64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f64, b: f64) => i32 = COMPARATOR<f64>()): Float64Array {\n    return SORT<Float64Array, f64>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return SLICE<Float64Array, f64>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return SUBARRAY<Float64Array, f64>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Float64Array {\n    return COPY_WITHIN<Float64Array, f64>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float64Array, f64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float64Array, f64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: f64, index: i32, self: Float64Array) => f64): Float64Array {\n    return MAP<Float64Array, f64>(this, fn);\n  }\n\n  filter(fn: (value: f64, index: i32, self: Float64Array) => bool): Float64Array {\n    return FILTER<Float64Array, f64>(this, fn);\n  }\n\n  findIndex(fn: (value: f64, index: i32, self: Float64Array) => bool): i32 {\n    return FIND_INDEX<Float64Array, f64>(this, fn);\n  }\n\n  some(fn: (value: f64, index: i32, self: Float64Array) => bool): bool {\n    return SOME<Float64Array, f64>(this, fn);\n  }\n\n  every(fn: (value: f64, index: i32, self: Float64Array) => bool): bool {\n    return EVERY<Float64Array, f64>(this, fn);\n  }\n\n  forEach(fn: (value: f64, index: i32, self: Float64Array) => void): void {\n    FOREACH<Float64Array, f64>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, f64>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinFloatArray<f64>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Float64Array {\n    return WRAP<Float64Array, f64>(buffer, byteOffset, length);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FILL<TArray extends ArrayBufferView, T extends number>(\n  array: TArray,\n  value: native<T>,\n  start: i32,\n  end: i32\n): TArray {\n  var dataStart = array.dataStart;\n  var len = array.length;\n  start = start < 0 ? max(len + start, 0) : min(start, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  if (sizeof<T>() == 1) {\n    if (start < end) memory.fill(dataStart + <usize>start, <u8>value, <usize>(end - start));\n  } else {\n    for (; start < end; ++start) {\n      store<T>(dataStart + (<usize>start << alignof<T>()), value);\n    }\n  }\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SORT<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  comparator: (a: T, b: T) => i32\n): TArray {\n  var len = array.length;\n  if (len <= 1) return array;\n  var base = array.dataStart;\n  if (len == 2) {\n    let a: T = load<T>(base, sizeof<T>()); // a = arr[1]\n    let b: T = load<T>(base); // b = arr[0]\n    if (comparator(a, b) < 0) {\n      store<T>(base, b, sizeof<T>()); // arr[1] = b\n      store<T>(base, a); // arr[0] = a\n    }\n    return array;\n  }\n  SORT_IMPL<T>(base, len, comparator);\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SLICE<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  start: i32,\n  end: i32\n): TArray {\n  var len = array.length;\n  start  = start < 0 ? max(start + len, 0) : min(start, len);\n  end    = end   < 0 ? max(end   + len, 0) : min(end  , len);\n  len = max(end - start, 0);\n  var slice = instantiate<TArray>(len);\n  memory.copy(\n    slice.dataStart,\n    array.dataStart + (<usize>start << alignof<T>()),\n    <usize>len << alignof<T>()\n  );\n  return slice;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SUBARRAY<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  begin: i32,\n  end: i32\n): TArray {\n  var len = array.length;\n  begin = begin < 0 ? max(len + begin, 0) : min(begin, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  end   = max(end, begin);\n\n  var out = __alloc(offsetof<TArray>(), idof<TArray>());\n  store<usize>(out, __retain(changetype<usize>(array.buffer)), offsetof<TArray>(\"buffer\"));\n  store<usize>(out, array.dataStart + (<usize>begin << alignof<T>()), offsetof<TArray>(\"dataStart\"));\n  store<u32>(out, (end - begin) << alignof<T>(), offsetof<TArray>(\"byteLength\"));\n  return changetype<TArray>(out); // retains\n}\n\n// @ts-ignore: decorator\n@inline\nfunction COPY_WITHIN<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  target: i32,\n  start: i32,\n  end: i32\n): TArray {\n  var len = array.length;\n  var dataStart = array.dataStart;\n\n      end   = min<i32>(end, len);\n  var to    = target < 0 ? max(len + target, 0) : min(target, len);\n  var from  = start < 0 ? max(len + start, 0) : min(start, len);\n  var last  = end < 0 ? max(len + end, 0) : min(end, len);\n  var count = min(last - from, len - to);\n\n  memory.copy(\n    dataStart + (<usize>to << alignof<T>()),\n    dataStart + (<usize>from << alignof<T>()),\n    <usize>count << alignof<T>()\n  );\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction REDUCE<TArray extends ArrayBufferView, T, TRet>(\n  array: TArray,\n  fn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    initialValue = fn(initialValue, load<T>(dataStart + (<usize>i << alignof<T>())), i, array);\n  }\n  return initialValue;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction REDUCE_RIGHT<TArray extends ArrayBufferView, T, TRet>(\n  array: TArray,\n  fn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var dataStart = array.dataStart;\n  for (let i = array.length - 1; i >= 0; i--) {\n    initialValue = fn(initialValue, load<T>(dataStart + (<usize>i << alignof<T>())), i, array);\n  }\n  return initialValue;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction MAP<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, self: TArray) => T,\n): TArray {\n  var len = array.length;\n  var dataStart = array.dataStart;\n\n  var byteLength = len << alignof<T>();\n  var out = __alloc(offsetof<TArray>(), idof<TArray>());\n  var buffer = __alloc(byteLength, idof<ArrayBuffer>());\n  for (let i = 0; i < len; i++) {\n    store<T>(\n      buffer + (<usize>i << alignof<T>()),\n      fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)\n    );\n  }\n  store<usize>(out, __retain(buffer), offsetof<TArray>(\"buffer\"));\n  store<usize>(out, buffer, offsetof<TArray>(\"dataStart\"));\n  store<u32>(out, byteLength, offsetof<TArray>(\"byteLength\"));\n  return changetype<TArray>(out); // retains\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FILTER<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, self: TArray) => bool,\n): TArray {\n  var len = array.length;\n  var out = __alloc(offsetof<TArray>(), idof<TArray>());\n  var buffer = __alloc(len << alignof<T>(), idof<ArrayBuffer>());\n  var dataStart  = array.dataStart;\n  var j: usize = 0;\n  for (let i = 0; i < len; i++) {\n    let value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    if (fn(value, i, array)) {\n      store<T>(\n        buffer + (j++ << alignof<T>()),\n        value\n      );\n    }\n  }\n  // shrink output buffer\n  var byteLength = j << alignof<T>();\n  var data = __realloc(buffer, byteLength);\n  store<usize>(out, __retain(data), offsetof<TArray>(\"buffer\"));\n  store<u32>(out, byteLength, offsetof<TArray>(\"byteLength\"));\n  store<usize>(out, data, offsetof<TArray>(\"dataStart\"));\n  return changetype<TArray>(out); // retains\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FIND_INDEX<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): i32 {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)) return i;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction INCLUDES<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  searchElement: T,\n  fromIndex: i32,\n): bool {\n  if (isFloat<T>()) {\n    let index: isize = fromIndex;\n    let length: isize = array.length;\n    if (length == 0 || index >= length) return false;\n    if (index < 0) index = max(length + index, 0);\n    let dataStart = array.dataStart;\n    while (index < length) {\n      let elem = load<T>(dataStart + (index << alignof<T>()));\n      // @ts-ignore\n      if (elem == searchElement || isNaN(elem) & isNaN(searchElement)) return true;\n      ++index;\n    }\n    return false;\n  } else {\n    return INDEX_OF<TArray, T>(array, searchElement, fromIndex) >= 0;\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction INDEX_OF<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  searchElement: T,\n  fromIndex: i32,\n): i32 {\n  var index: isize = fromIndex;\n  var length: isize = array.length;\n  if (length == 0 || index >= length) return -1;\n  if (index < 0) index = max(length + index, 0);\n  var dataStart = array.dataStart;\n  while (index < length) {\n    if (load<T>(dataStart + (index << alignof<T>())) == searchElement) return <i32>index;\n    ++index;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction LAST_INDEX_OF<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  searchElement: T,\n  fromIndex: i32,\n): i32 {\n  var index: isize = fromIndex;\n  var length: isize = array.length;\n  if (length == 0) return -1;\n  if (index < 0) index = length + index; // no need to clamp\n  else if (index >= length) index = length - 1;\n  var dataStart = array.dataStart;\n  while (index >= 0) {\n    if (load<T>(dataStart + (index << alignof<T>())) == searchElement) return <i32>index;\n    --index;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SOME<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)) return true;\n  }\n  return false;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction EVERY<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)) continue;\n    return false;\n  }\n  return true;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FOREACH<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => void,\n): void {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction REVERSE<TArray extends ArrayBufferView, T>(array: TArray): TArray {\n  var dataStart = array.dataStart;\n  for (let front: usize = 0, back: usize = array.length - 1; front < back; ++front, --back) {\n    let frontPtr = dataStart + (front << alignof<T>());\n    let backPtr = dataStart + (back << alignof<T>());\n    let temp = load<T>(frontPtr);\n    store<T>(frontPtr, load<T>(backPtr));\n    store<T>(backPtr, temp);\n  }\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction WRAP<TArray extends ArrayBufferView, T>(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): TArray {\n  var bufferByteLength = buffer.byteLength;\n  if (<u32>byteOffset >= <u32>bufferByteLength) {\n    throw new RangeError(E_INDEXOUTOFRANGE);\n  }\n  var byteLength: i32;\n  if (length < 0) {\n    if (length == -1) {\n      const mask = <i32>(1 << alignof<T>() - 1);\n      if (buffer.byteLength & mask) {\n        throw new RangeError(E_INVALIDLENGTH);\n      } else {\n        byteLength = buffer.byteLength;\n      }\n    } else {\n      throw new RangeError(E_INVALIDLENGTH);\n    }\n  } else {\n    byteLength = length << alignof<T>();\n  }\n  if (byteOffset + byteLength > buffer.byteLength) {\n    throw new RangeError(E_INVALIDLENGTH);\n  }\n  var out = __alloc(offsetof<TArray>(), idof<TArray>());\n  store<usize>(out, __retain(changetype<usize>(buffer)), offsetof<TArray>(\"buffer\"));\n  store<u32>(out, byteLength, offsetof<TArray>(\"byteLength\"));\n  store<usize>(out, changetype<usize>(buffer) + <usize>byteOffset, offsetof<TArray>(\"dataStart\"));\n  return changetype<TArray>(out); // retains\n}\n","import { i128 } from './i128';\nimport { u128 } from './u128';\nimport { u256toa10 }  from \"../utils\";\n\n@lazy const HEX_CHARS = '0123456789abcdef';\n\nexport class u256 {\n\n  @inline\n  static get Zero(): u256 {\n    return new u256();\n  }\n\n  @inline\n  static get One(): u256 {\n    return new u256(1);\n  }\n\n  @inline\n  static get Min(): u256 {\n    return new u256();\n  }\n\n  @inline\n  static get Max(): u256 {\n    return new u256(u64.MAX_VALUE, u64.MAX_VALUE, u64.MAX_VALUE, u64.MAX_VALUE);\n  }\n\n  @inline\n  static fromU256(value: u256): u256 {\n    return new u256(value.lo1, value.lo2, value.hi1, value.hi2);\n  }\n\n  @inline\n  static fromU128(value: u128): u256 {\n    return new u256(value.lo, value.hi);\n  }\n\n  @inline\n  static fromU64(value: u64): u256 {\n    return new u256(value);\n  }\n\n  @inline\n  static fromI64(value: i64): u256 {\n    var mask = value >> 63;\n    return new u256(value, mask, mask, mask);\n  }\n\n  @inline\n  static fromU32(value: u32): u256 {\n    return new u256(value);\n  }\n\n  @inline\n  static fromI32(value: i32): u256 {\n    var mask: u64 = value >> 63;\n    return new u256(value, mask, mask, mask);\n  }\n\n  @inline\n  static fromBits(\n    l0: u32, l1: u32, l2: u32, l3: u32,\n    h0: u32, h1: u32, h2: u32, h3: u32,\n  ): u256 {\n    return new u256(\n      <u64>l0 | ((<u64>l1) << 32),\n      <u64>l2 | ((<u64>l3) << 32),\n      <u64>h0 | ((<u64>h1) << 32),\n      <u64>h2 | ((<u64>h3) << 32),\n    );\n  }\n\n  @inline\n  static fromBytes<T>(array: T, bigEndian: bool = false): u256 {\n    if (array instanceof u8[]) {\n      return bigEndian ? u256.fromBytesBE(<u8[]>array) : u256.fromBytesLE(<u8[]>array);\n    } else if (array instanceof Uint8Array) {\n      return bigEndian ? u256.fromUint8ArrayBE(<Uint8Array>array) : u256.fromUint8ArrayLE(<Uint8Array>array);\n    } else {\n      throw new TypeError(\"Unsupported generic type\");\n    }\n  }\n\n  static fromBytesLE(array: u8[]): u256 {\n    assert(array.length && (array.length & 31) == 0);\n    var buffer = array.dataStart\n    return new u256(\n      load<u64>(buffer, 0),\n      load<u64>(buffer, 1 * sizeof<u64>()),\n      load<u64>(buffer, 2 * sizeof<u64>()),\n      load<u64>(buffer, 3 * sizeof<u64>()),\n    );\n  }\n\n  static fromBytesBE(array: u8[]): u256 {\n    assert(array.length && (array.length & 31) == 0);\n    var buffer = array.dataStart;\n    return new u256(\n      bswap<u64>(load<u64>(buffer, 3 * sizeof<u64>())),\n      bswap<u64>(load<u64>(buffer, 2 * sizeof<u64>())),\n      bswap<u64>(load<u64>(buffer, 1 * sizeof<u64>())),\n      bswap<u64>(load<u64>(buffer, 0))\n    );\n  }\n\n  static fromUint8ArrayLE(array: Uint8Array): u256 {\n    assert(array.length && (array.length & 31) == 0);\n    var buffer = array.dataStart;\n    return new u256(\n        load<u64>(buffer, 0),\n        load<u64>(buffer, 1 * sizeof<u64>()),\n        load<u64>(buffer, 2 * sizeof<u64>()),\n        load<u64>(buffer, 3 * sizeof<u64>())\n    );\n  }\n\n  static fromUint8ArrayBE(array: Uint8Array): u256 {\n    assert(array.length && (array.length & 31) == 0);\n    var buffer = array.dataStart;\n    return new u256(\n        bswap<u64>(load<u64>(buffer, 3 * sizeof<u64>())),\n        bswap<u64>(load<u64>(buffer, 2 * sizeof<u64>())),\n        bswap<u64>(load<u64>(buffer, 1 * sizeof<u64>())),\n        bswap<u64>(load<u64>(buffer, 0))\n    );\n  }\n\n  // TODO need improvement\n  // max safe uint for f64 actually 52-bits\n  @inline\n  static fromF64(value: f64): u256 {\n    var mask: u64 = -(value < 0);\n    return new u256(<u64>value, mask, mask, mask);\n  }\n\n  // TODO need improvement\n  // max safe int for f32 actually 23-bits\n  @inline\n  static fromF32(value: f32): u256 {\n    var mask: u64 = -(value < 0);\n    return new u256(<u64>value, mask, mask, mask);\n  }\n\n  // TODO\n  // static fromString(str: string): u256\n\n  constructor(\n    public lo1: u64 = 0,\n    public lo2: u64 = 0,\n    public hi1: u64 = 0,\n    public hi2: u64 = 0,\n  ) {}\n\n  @inline\n  set(value: u256): this {\n    this.lo1 = value.lo1;\n    this.lo2 = value.lo2;\n    this.hi1 = value.hi1;\n    this.hi2 = value.hi2;\n    return this;\n  }\n\n  @inline\n  setU128(value: u128): this {\n    this.lo1 = value.lo;\n    this.lo2 = value.hi;\n    this.hi1 = 0;\n    this.hi2 = 0;\n    return this;\n  }\n\n  @inline\n  setI64(value: i64): this {\n    var mask: u64 = value >> 63;\n    this.lo1 = value;\n    this.lo2 = mask;\n    this.hi1 = mask;\n    this.hi2 = mask;\n    return this;\n  }\n\n  @inline\n  setU64(value: u64): this {\n    this.lo1 = value;\n    this.lo2 = 0;\n    this.hi1 = 0;\n    this.hi2 = 0;\n    return this;\n  }\n\n  @inline\n  setI32(value: i32): this {\n    var mask: u64 = value >> 63;\n    this.lo1 = value;\n    this.lo2 = mask;\n    this.hi1 = mask;\n    this.hi2 = mask;\n    return this;\n  }\n\n  @inline\n  setU32(value: u32): this {\n    this.lo1 = value;\n    this.lo2 = 0;\n    this.hi1 = 0;\n    this.hi2 = 0;\n    return this;\n  }\n\n  @inline\n  isZero(): bool {\n    return !(this.lo1 | this.lo2 | this.hi1 | this.hi2);\n  }\n\n  @inline @operator.prefix('!')\n  static isEmpty(value: u256): bool {\n    return value === null || value.isZero();\n  }\n\n  @inline @operator.prefix('~')\n  not(): u256 {\n    return new u256(~this.lo1, ~this.lo2, ~this.hi1, ~this.hi2);\n  }\n\n  @inline @operator.prefix('+')\n  pos(): u256 {\n    return this;\n  }\n\n  @inline @operator.prefix('-')\n  neg(): u256 {\n    var lo1 = ~this.lo1,\n        lo2 = ~this.lo2,\n        hi1 = ~this.hi1,\n        hi2 = ~this.hi2;\n\n    var cy = ((lo1 & 1) + (lo1 >> 1)) >> 63;\n    var cy1 = ((lo2 & 1) + (lo2 >> 1)) >> 63;\n    var cy2 = ((hi1 & 1) + (hi1 >> 1)) >> 63;\n\n    return new u256(lo1 + 1, lo2 + cy, hi1 + cy1, hi2 + cy2);\n  }\n\n  @inline @operator('+')\n  static add(a: u256, b: u256): u256 {\n    var alo = a.lo1;\n    var blo = b.lo1;\n    var lo   = new u128(alo) + new u128(blo);\n    var amid = new u128(alo, a.hi1);\n    var bmid = new u128(blo, b.hi1);\n    var mid  = amid + bmid + new u128(lo.hi);\n    var hi   = a.hi2 + b.hi2 + mid.hi;\n\n    return new u256(lo.lo, mid.lo, mid.hi, hi);\n  }\n\n  @inline @operator('-')\n  static sub(a: u256, b: u256): u256 {\n    var alo = a.lo1;\n    var blo = b.lo1;\n    var lo   = new u128(alo) - new u128(blo);\n    var amid = new u128(alo, a.hi1);\n    var bmid = new u128(blo, b.hi1);\n    var mid  = amid - bmid - new u128(lo.hi);\n    var hi   = a.hi2 - b.hi2 - mid.hi;\n\n    return new u256(lo.lo, mid.lo, mid.hi, hi);\n  }\n\n  @inline @operator('|')\n  static or(a: u256, b: u256): u256 {\n    return new u256(a.lo1 | b.lo1, a.lo2 | b.lo2, a.hi1 | b.hi1, a.hi2 | b.hi2);\n  }\n\n  @inline @operator('^')\n  static xor(a: u256, b: u256): u256 {\n    return new u256(a.lo1 ^ b.lo1, a.lo2 ^ b.lo2, a.hi1 ^ b.hi1, a.hi2 ^ b.hi2);\n  }\n\n  @inline @operator('&')\n  static and(a: u256, b: u256): u256 {\n    return new u256(a.lo1 & b.lo1, a.lo2 & b.lo2, a.hi1 & b.hi1, a.hi2 & b.hi2);\n  }\n\n  @inline @operator('>>')\n  static shr(value: u256, shift: i32): u256 {\n    shift &= 255;\n\n    // need for preventing redundant i32 -> u64 extends\n    var shift64 = shift as u64;\n    var lo1: u64, lo2: u64, hi1: u64, hi2: u64;\n\n    if (shift <= 64) {\n      if (shift == 0) return value;\n      hi2 =  value.hi2 >> shift64;\n      hi1 = (value.hi1 >> shift64) | (hi2 << (64 - shift64));\n      lo2 = (value.lo2 >> shift64) | (hi1 << (64 - shift64));\n      lo1 = (value.lo1 >> shift64) | (lo2 << (64 - shift64));\n      return new u256(lo1, lo2, hi1, hi2);\n    } else if (shift > 64 && shift <= 128) {\n      hi1 = value.hi2 >> (128 - shift64);\n      return new u256(value.lo2, value.hi1, hi1);\n    } else if (shift > 128 && shift <= 192) {\n      lo2 = value.hi2 >> (192 - shift);\n      return new u256(value.hi1, lo2);\n    } else {\n      return new u256(value.hi2 >> (256 - shift64));\n    }\n  }\n\n  @inline @operator('>>>')\n  static shr_u(value: u256, shift: i32): u256 {\n    return u256.shr(value, shift);\n  }\n\n  @inline @operator('==')\n  static eq(a: u256, b: u256): bool {\n    return a.lo1 == b.lo1 && a.lo2 == b.lo2 && a.hi1 == b.hi1 && a.hi2 == b.hi2;\n  }\n\n  @inline @operator('!=')\n  static ne(a: u256, b: u256): bool {\n    return !u256.eq(a, b);\n  }\n\n  @inline @operator('<')\n  static lt(a: u256, b: u256): bool {\n    var ah2 = a.hi2, ah1 = a.hi1, bh2 = b.hi2, bh1 = b.hi1, al2 = a.lo2, bl2 = b.lo2;\n    if (ah2 == bh2) {\n      if (ah1 == bh1) {\n        return al2 == bl2 ? a.lo1 < b.lo1 : al2 < bl2\n      } else {\n        return ah1 < bh1;\n      }\n    } else {\n      return ah2 < bh2;\n    }\n  }\n\n  @inline @operator('>')\n  static gt(a: u256, b: u256): bool {\n    return b < a;\n  }\n\n  @inline @operator('<=')\n  static le(a: u256, b: u256): bool {\n    return !u256.gt(a, b);\n  }\n\n  @inline @operator('>=')\n  static ge(a: u256, b: u256): bool {\n    return !u256.lt(a, b);\n  }\n\n  @inline\n  static popcnt(value: u256): i32 {\n    var count = popcnt(value.lo1);\n    if (value.lo2) count += popcnt(value.lo2);\n    if (value.hi1) count += popcnt(value.hi1);\n    if (value.hi2) count += popcnt(value.hi2);\n    return <i32>count;\n  }\n\n  @inline\n  static clz(value: u256): i32 {\n         if (value.hi2) return <i32>(clz(value.hi2) + 0);\n    else if (value.hi1) return <i32>(clz(value.hi1) + 64);\n    else if (value.lo2) return <i32>(clz(value.lo2) + 128);\n    else                return <i32>(clz(value.lo1) + 192);\n  }\n\n  @inline\n  static ctz(value: u256): i32 {\n         if (value.lo1) return <i32>(ctz(value.lo1) + 0);\n    else if (value.lo2) return <i32>(ctz(value.lo2) + 64);\n    else if (value.hi1) return <i32>(ctz(value.hi1) + 128);\n    else                return <i32>(ctz(value.hi2) + 192);\n  }\n\n  /**\n   * Convert to 128-bit signed integer\n   * @return 256-bit signed integer\n   */\n  @inline\n  toI128(): i128 {\n    return new i128(\n      this.lo1,\n      (this.lo2 & 0x7FFFFFFFFFFFFFFF) |\n      (this.hi2 & 0x8000000000000000)\n    );\n  }\n\n  /**\n   * Convert to 128-bit unsigned integer\n   * @return 128-bit unsigned integer\n   */\n  @inline\n  toU128(): u128 {\n    return new u128(this.lo1, this.lo2);\n  }\n\n  /**\n  * Convert to 256-bit unsigned integer\n  * @returns 256-bit unsigned integer\n  */\n  @inline\n  toU256(): this {\n    return this;\n  }\n\n  /**\n   * Convert to 64-bit signed integer\n   * @return 64-bit signed integer\n   */\n  @inline\n  toI64(): i64 {\n    return <i64>(\n      (this.lo1 & 0x7FFFFFFFFFFFFFFF) |\n      (this.hi2 & 0x8000000000000000)\n    );\n  }\n\n  /**\n   * Convert to 64-bit unsigned integer\n   * @return 64-bit unsigned integer\n   */\n  @inline\n  toU64(): u64 {\n    return this.lo1;\n  }\n\n  /**\n   * Convert to 32-bit signed integer\n   * @return 32-bit signed integer\n   */\n  @inline\n  toI32(): i32 {\n    return <i32>this.toI64();\n  }\n\n  /**\n   * Convert to 32-bit unsigned integer\n   * @return 32-bit unsigned integer\n   */\n  @inline\n  toU32(): u32 {\n    return <u32>this.lo1;\n  }\n\n  /**\n   * Convert to 1-bit boolean\n   * @return 1-bit boolean\n   */\n  @inline\n  toBool(): bool {\n    return <bool>(this.lo1 | this.lo2 | this.hi1 | this.hi2);\n  }\n\n  private toArrayBufferLE(buffer: usize): void {\n    store<u64>(buffer, this.lo1, 0 * sizeof<u64>());\n    store<u64>(buffer, this.lo2, 1 * sizeof<u64>());\n    store<u64>(buffer, this.hi1, 2 * sizeof<u64>());\n    store<u64>(buffer, this.hi2, 3 * sizeof<u64>());\n  }\n\n  private toArrayBufferBE(buffer: usize): void {\n    store<u64>(buffer, bswap(this.hi2), 0 * sizeof<u64>());\n    store<u64>(buffer, bswap(this.hi1), 1 * sizeof<u64>());\n    store<u64>(buffer, bswap(this.lo2), 2 * sizeof<u64>());\n    store<u64>(buffer, bswap(this.lo1), 3 * sizeof<u64>());\n  }\n\n  private toArrayBuffer(buffer: usize, bigEndian: bool = false): void {\n    if (bigEndian) {\n      this.toArrayBufferBE(buffer);\n    } else {\n      this.toArrayBufferLE(buffer);\n    }\n  }\n\n  /**\n   * Convert to generic type T. Useful inside other generics methods\n   * @param  T  is <bool | i8 | u8 | i16 | u16 | i32 | u32 | i64 | u64 | f32 | f64 | u128 | u256 | u8[] | Uint8Array | String>\n   * @returns   type of T\n   */\n  @inline\n  as<T>(): T {\n    var dummy: T;\n         if (dummy instanceof bool)       return <T>this.toBool();\n    else if (dummy instanceof i8)         return <T>this.toI64();\n    else if (dummy instanceof u8)         return <T>this.toU64();\n    else if (dummy instanceof i16)        return <T>this.toI64();\n    else if (dummy instanceof u16)        return <T>this.toU64();\n    else if (dummy instanceof i32)        return <T>this.toI64();\n    else if (dummy instanceof i64)        return <T>this.toI64();\n    else if (dummy instanceof u32)        return <T>this.toU64();\n    else if (dummy instanceof u64)        return <T>this.toU64();\n    // else if (dummy instanceof f32)        return <T>this.toF64();\n    // else if (dummy instanceof f64)        return <T>this.toF64();\n    else if (dummy instanceof i128)       return <T>this.toI128();\n    else if (dummy instanceof u128)       return <T>this.toU128();\n    else if (dummy instanceof u256)       return <T>this.toU256();\n    else if (dummy instanceof u8[])       return <T>this.toBytes();\n    else if (dummy instanceof Uint8Array) return <T>this.toUint8Array();\n    else if (dummy instanceof String)     return <T>this.toString();\n    else throw new TypeError('Unsupported generic type');\n  }\n\n  /**\n   * Convert to byte array\n   * @param le Little or Big Endian? Default: true\n   * @returns  Array of bytes\n   */\n  @inline\n  toBytes(bigEndian: bool = false): u8[] {\n    var result = new Array<u8>(32);\n    var buffer = result.dataStart;\n    this.toArrayBuffer(buffer, bigEndian);\n    return result;\n  }\n\n  /**\n   * Convert to Uint8Array\n   * @param le Little or Big Endian? Default: true\n   * @returns  Uint8Array\n   */\n  @inline\n  toUint8Array(bigEndian: bool = false): Uint8Array {\n    var result = new Uint8Array(32);\n    var buffer = result.dataStart;\n    this.toArrayBuffer(buffer, bigEndian);\n    return result;\n  }\n\n  @inline\n  clone(): u256 {\n    return new u256(this.lo1, this.lo2, this.hi1, this.hi2);\n  }\n\n  toString(radix: i32 = 0): string {\n    if (!radix) radix = 10;\n    assert(radix == 10 || radix == 16, 'radix argument must be between 10 or 16');\n\n    if (this.isZero()) return '0';\n\n    var result = '';\n    var it = this.clone();\n    if (radix == 16) {\n      let shift: i32 = 252 - (u256.clz(it) & ~3);\n      while (shift >= 0) {\n        it >>= shift;\n        result = result.concat(HEX_CHARS.charAt(<i32>(it.lo1 & 15)));\n        shift -= 4;\n      }\n      return result;\n    } else if (radix == 10) {\n      return u256toa10(this);\n    }\n    return \"undefined\";\n  }\n}\n","import { u256 } from './u256';\n\nexport class i256 {\n\n  @inline static get Zero(): i256 { return new i256(); }\n  @inline static get One():  i256 { return new i256(1); }\n  @inline static get Min():  i256 { return new i256(0, 0, 0, 0x8000000000000000); }\n  @inline static get Max():  i256 { return new i256(u64.MAX_VALUE, u64.MAX_VALUE, u64.MAX_VALUE, 0x7FFFFFFFFFFFFFFF); }\n\n  constructor(\n    public lo1: i64 = 0,\n    public lo2: i64 = 0,\n    public hi1: i64 = 0,\n    public hi2: i64 = 0,\n  ) {}\n\n  @inline\n  isNeg(): bool {\n    return <bool>(this.hi2 >>> 63);\n  }\n\n  @inline\n  isZero(): bool {\n    return !(this.lo1 | this.lo2 | this.hi1 | this.hi2);\n  }\n\n  @inline @operator.prefix('!')\n  static isEmpty(value: i256): bool {\n    return value === null || !value.isZero();\n  }\n\n  /*\n  @inline\n  static abs(value: i128): i128 {\n    return value < 0 ? value.neg() : value;\n  }\n  */\n\n  // TODO\n}\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { BLOCK, BLOCK_MAXSIZE, BLOCK_OVERHEAD } from \"./rt/common\";\nimport { idof } from \"./builtins\";\nimport { E_INVALIDLENGTH } from \"./util/error\";\n\nexport abstract class ArrayBufferView {\n\n  readonly buffer: ArrayBuffer;\n  @unsafe readonly dataStart: usize;\n  readonly byteLength: i32;\n\n  get byteOffset(): i32 {\n    return <i32>(this.dataStart - changetype<usize>(this.buffer));\n  }\n\n  get length(): i32 {\n    ERROR(\"missing implementation: subclasses must implement ArrayBufferView#length\");\n    return unreachable();\n  }\n\n  protected constructor(length: i32, alignLog2: i32) {\n    if (<u32>length > <u32>BLOCK_MAXSIZE >>> alignLog2) throw new RangeError(E_INVALIDLENGTH);\n    var buffer = __alloc(length = length << alignLog2, idof<ArrayBuffer>());\n    memory.fill(buffer, 0, <usize>length);\n    this.buffer = changetype<ArrayBuffer>(buffer); // retains\n    this.dataStart = buffer;\n    this.byteLength = length;\n  }\n}\n\n@sealed export class ArrayBuffer {\n\n  static isView<T>(value: T): bool {\n    if (isNullable<T>()) {\n      if (value === null) return false;\n    }\n    if (value instanceof Int8Array) return true;\n    if (value instanceof Uint8Array) return true;\n    if (value instanceof Uint8ClampedArray) return true;\n    if (value instanceof Int16Array) return true;\n    if (value instanceof Uint16Array) return true;\n    if (value instanceof Int32Array) return true;\n    if (value instanceof Uint32Array) return true;\n    if (value instanceof Int64Array) return true;\n    if (value instanceof Uint64Array) return true;\n    if (value instanceof Float32Array) return true;\n    if (value instanceof Float64Array) return true;\n    if (value instanceof DataView) return true;\n    return false;\n  }\n\n  constructor(length: i32) {\n    if (<u32>length > <u32>BLOCK_MAXSIZE) throw new RangeError(E_INVALIDLENGTH);\n    var buffer = __alloc(<usize>length, idof<ArrayBuffer>());\n    memory.fill(buffer, 0, <usize>length);\n    return changetype<ArrayBuffer>(buffer); // retains\n  }\n\n  get byteLength(): i32 {\n    return changetype<BLOCK>(changetype<usize>(this) - BLOCK_OVERHEAD).rtSize;\n  }\n\n  slice(begin: i32 = 0, end: i32 = BLOCK_MAXSIZE): ArrayBuffer {\n    var length = this.byteLength;\n    begin = begin < 0 ? max(length + begin, 0) : min(begin, length);\n    end   = end   < 0 ? max(length + end  , 0) : min(end  , length);\n    var outSize = <usize>max(end - begin, 0);\n    var out = __alloc(outSize, idof<ArrayBuffer>());\n    memory.copy(out, changetype<usize>(this) + <usize>begin, outSize);\n    return changetype<ArrayBuffer>(out); // retains\n  }\n\n  toString(): string {\n    return \"[object ArrayBuffer]\";\n  }\n}\n","import { memcmp, memmove, memset } from \"./util/memory\";\nimport { E_NOTIMPLEMENTED } from \"./util/error\";\n\n/** Memory manager interface. */\nexport namespace memory {\n\n  /** Gets the size of the memory in pages. */\n  // @ts-ignore: decorator\n  @builtin\n  export declare function size(): i32;\n\n  /** Grows the memory by the given size in pages and returns the previous size in pages. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function grow(pages: i32): i32;\n\n  /** Fills a section in memory with the specified byte value. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export function fill(dst: usize, c: u8, n: usize): void {\n    memset(dst, c, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  /** Copies a section of memory to another. Has move semantics. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export function copy(dst: usize, src: usize, n: usize): void {\n    memmove(dst, src, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  /** Initializes a memory segment. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function init(segmentIndex: u32, srcOffset: usize, dstOffset: usize, n: usize): void {\n    throw new Error(E_NOTIMPLEMENTED);\n  }\n\n  /** Drops a memory segment. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function drop(segmentIndex: u32): void {\n    throw new Error(E_NOTIMPLEMENTED);\n  }\n\n  /** Repeats a section of memory at a specific address. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function repeat(dst: usize, src: usize, srcLength: usize, count: usize): void {\n    var index: usize = 0;\n    var total = srcLength * count;\n    while (index < total) {\n      memory.copy(dst + index, src, srcLength);\n      index += srcLength;\n    }\n  }\n\n  /** Compares a section of memory to another. */\n  // @ts-ignore: decorator\n  @inline\n  export function compare(vl: usize, vr: usize, n: usize): i32 {\n    return memcmp(vl, vr, n);\n  }\n}\n","export function memcpy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memcpy.c\n  if (ASC_SHRINK_LEVEL > 1) {\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    let w: u32, x: u32;\n\n    // copy 1 byte each until src is aligned to 4 bytes\n    while (n && (src & 3)) {\n      store<u8>(dest++, load<u8>(src++));\n      n--;\n    }\n\n    // if dst is aligned to 4 bytes as well, copy 4 bytes each\n    if ((dest & 3) == 0) {\n      while (n >= 16) {\n        store<u32>(dest     , load<u32>(src     ));\n        store<u32>(dest +  4, load<u32>(src +  4));\n        store<u32>(dest +  8, load<u32>(src +  8));\n        store<u32>(dest + 12, load<u32>(src + 12));\n        src += 16; dest += 16; n -= 16;\n      }\n      if (n & 8) {\n        store<u32>(dest    , load<u32>(src    ));\n        store<u32>(dest + 4, load<u32>(src + 4));\n        dest += 8; src += 8;\n      }\n      if (n & 4) {\n        store<u32>(dest, load<u32>(src));\n        dest += 4; src += 4;\n      }\n      if (n & 2) { // drop to 2 bytes each\n        store<u16>(dest, load<u16>(src));\n        dest += 2; src += 2;\n      }\n      if (n & 1) { // drop to 1 byte\n        store<u8>(dest++, load<u8>(src++));\n      }\n      return;\n    }\n\n    // if dst is not aligned to 4 bytes, use alternating shifts to copy 4 bytes each\n    // doing shifts if faster when copying enough bytes (here: 32 or more)\n    if (n >= 32) {\n      switch (dest & 3) {\n        // known to be != 0\n        case 1: {\n          w = load<u32>(src);\n          store<u8>(dest++, load<u8>(src++));\n          store<u8>(dest++, load<u8>(src++));\n          store<u8>(dest++, load<u8>(src++));\n          n -= 3;\n          while (n >= 17) {\n            x = load<u32>(src + 1);\n            store<u32>(dest, w >> 24 | x << 8);\n            w = load<u32>(src + 5);\n            store<u32>(dest + 4, x >> 24 | w << 8);\n            x = load<u32>(src + 9);\n            store<u32>(dest + 8, w >> 24 | x << 8);\n            w = load<u32>(src + 13);\n            store<u32>(dest + 12, x >> 24 | w << 8);\n            src += 16; dest += 16; n -= 16;\n          }\n          break;\n        }\n        case 2: {\n          w = load<u32>(src);\n          store<u8>(dest++, load<u8>(src++));\n          store<u8>(dest++, load<u8>(src++));\n          n -= 2;\n          while (n >= 18) {\n            x = load<u32>(src + 2);\n            store<u32>(dest, w >> 16 | x << 16);\n            w = load<u32>(src + 6);\n            store<u32>(dest + 4, x >> 16 | w << 16);\n            x = load<u32>(src + 10);\n            store<u32>(dest + 8, w >> 16 | x << 16);\n            w = load<u32>(src + 14);\n            store<u32>(dest + 12, x >> 16 | w << 16);\n            src += 16; dest += 16; n -= 16;\n          }\n          break;\n        }\n        case 3: {\n          w = load<u32>(src);\n          store<u8>(dest++, load<u8>(src++));\n          n -= 1;\n          while (n >= 19) {\n            x = load<u32>(src + 3);\n            store<u32>(dest, w >> 8 | x << 24);\n            w = load<u32>(src + 7);\n            store<u32>(dest + 4, x >> 8 | w << 24);\n            x = load<u32>(src + 11);\n            store<u32>(dest + 8, w >> 8 | x << 24);\n            w = load<u32>(src + 15);\n            store<u32>(dest + 12, x >> 8 | w << 24);\n            src += 16; dest += 16; n -= 16;\n          }\n          break;\n        }\n      }\n    }\n\n    // copy remaining bytes one by one\n    if (n & 16) {\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n    }\n    if (n & 8) {\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n    }\n    if (n & 4) {\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n    }\n    if (n & 2) {\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n    }\n    if (n & 1) {\n      store<u8>(dest++, load<u8>(src++));\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memmove(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n  if (dest === src) return;\n  if (ASC_SHRINK_LEVEL < 1) {\n    if (src + n <= dest || dest + n <= src) {\n      memcpy(dest, src, n);\n      return;\n    }\n  }\n  if (dest < src) {\n    if ((src & 7) == (dest & 7)) {\n      while (dest & 7) {\n        if (!n) return;\n        --n;\n        store<u8>(dest++, load<u8>(src++));\n      }\n      while (n >= 8) {\n        store<u64>(dest, load<u64>(src));\n        n    -= 8;\n        dest += 8;\n        src  += 8;\n      }\n    }\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    if ((src & 7) == (dest & 7)) {\n      while ((dest + n) & 7) {\n        if (!n) return;\n        store<u8>(dest + --n, load<u8>(src + n));\n      }\n      while (n >= 8) {\n        n -= 8;\n        store<u64>(dest + n, load<u64>(src + n));\n      }\n    }\n    while (n) {\n      store<u8>(dest + --n, load<u8>(src + n));\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memset(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n  if (ASC_SHRINK_LEVEL > 1) {\n    while (n) {\n      store<u8>(dest++, c);\n      --n;\n    }\n  } else {\n    // fill head and tail with minimal branching\n    if (!n) return;\n    store<u8>(dest, c);\n    store<u8>(dest + n - 1, c);\n    if (n <= 2) return;\n\n    store<u8>(dest + 1, c);\n    store<u8>(dest + 2, c);\n    store<u8>(dest + n - 2, c);\n    store<u8>(dest + n - 3, c);\n    if (n <= 6) return;\n    store<u8>(dest + 3, c);\n    store<u8>(dest + n - 4, c);\n    if (n <= 8) return;\n\n    // advance pointer to align it at 4-byte boundary\n    let k: usize = -dest & 3;\n    dest += k;\n    n -= k;\n    n &= -4;\n\n    let c32: u32 = <u32>-1 / 255 * c;\n\n    // fill head/tail up to 28 bytes each in preparation\n    store<u32>(dest, c32);\n    store<u32>(dest + n - 4, c32);\n    if (n <= 8) return;\n    store<u32>(dest + 4, c32);\n    store<u32>(dest + 8, c32);\n    store<u32>(dest + n - 12, c32);\n    store<u32>(dest + n - 8, c32);\n    if (n <= 24) return;\n    store<u32>(dest + 12, c32);\n    store<u32>(dest + 16, c32);\n    store<u32>(dest + 20, c32);\n    store<u32>(dest + 24, c32);\n    store<u32>(dest + n - 28, c32);\n    store<u32>(dest + n - 24, c32);\n    store<u32>(dest + n - 20, c32);\n    store<u32>(dest + n - 16, c32);\n\n    // align to a multiple of 8\n    k = 24 + (dest & 4);\n    dest += k;\n    n -= k;\n\n    // copy 32 bytes each\n    let c64: u64 = <u64>c32 | (<u64>c32 << 32);\n    while (n >= 32) {\n      store<u64>(dest, c64);\n      store<u64>(dest + 8, c64);\n      store<u64>(dest + 16, c64);\n      store<u64>(dest + 24, c64);\n      n -= 32;\n      dest += 32;\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memcmp(vl: usize, vr: usize, n: usize): i32 {\n  if (vl == vr) return 0;\n  if (ASC_SHRINK_LEVEL < 2) {\n    if ((vl & 7) == (vr & 7)) {\n      while (vl & 7) {\n        if (!n) return 0;\n        let a = <i32>load<u8>(vl);\n        let b = <i32>load<u8>(vr);\n        if (a != b) return a - b;\n        n--; vl++; vr++;\n      }\n      while (n >= 8) {\n        if (load<u64>(vl) != load<u64>(vr)) break;\n        vl += 8;\n        vr += 8;\n        n  -= 8;\n      }\n    }\n  }\n  while (n--) {\n    let a = <i32>load<u8>(vl);\n    let b = <i32>load<u8>(vr);\n    if (a != b) return a - b;\n    vl++; vr++;\n  }\n  return 0;\n}\n","// @ts-ignore: decorator\n@builtin\nexport declare function isInteger<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isFloat<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isBoolean<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isSigned<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isReference<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isString<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isArray<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isArrayLike<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isFunction<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isNullable<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isDefined(expression: void): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isConstant(expression: void): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isManaged<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isVoid<T>(): boolean;\n\n// @ts-ignore\n@builtin\nexport declare function lengthof<T>(func?: T): i32;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function clz<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function ctz<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function popcnt<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function rotl<T>(value: T, shift: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function rotr<T>(value: T, shift: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function abs<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function max<T>(left: T, right: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function min<T>(left: T, right: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function ceil<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function floor<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function copysign<T>(left: T, right: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function nearest<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function reinterpret<T>(value: number): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function sqrt<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function trunc<T>(value: T): T;\n\n// @ts-ignore: decorator\n@unsafe @builtin\nexport declare function load<T>(ptr: usize, immOffset?: usize, immAlign?: usize): T;\n\n// @ts-ignore: decorator\n@unsafe @builtin\nexport declare function store<T>(ptr: usize, value: void, immOffset?: usize, immAlign?: usize): void;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function sizeof<T>(): usize; // | u32 / u64\n\n// @ts-ignore: decorator\n@builtin\nexport declare function alignof<T>(): usize; // | u32 / u64\n\n// @ts-ignore: decorator\n@builtin\nexport declare function offsetof<T>(fieldName?: string): usize; // | u32 / u64\n\n// @ts-ignore: decorator\n@builtin\nexport declare function idof<T>(): u32;\n\n// @ts-ignore\n@builtin\nexport declare function nameof<T>(): string;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function select<T>(ifTrue: T, ifFalse: T, condition: bool): T;\n\n// @ts-ignore: decorator\n@unsafe @builtin\nexport declare function unreachable(): void;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function changetype<T>(value: void): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function assert<T>(isTrueish: T, message?: string): T;\n\n// @ts-ignore: decorator\n@unsafe @builtin\nexport declare function unchecked<T>(expr: T): T;\n\n// @ts-ignore: decorator\n@unsafe @builtin\nexport declare function call_indirect<T>(target: void, ...args: void[]): T;\n\n// @ts-ignore: decorator\n@unsafe @builtin\nexport declare function call_direct<T>(target: void, ...args: void[]): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function instantiate<T>(...args: void[]): T;\n\nexport namespace atomic {\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function load<T>(ptr: usize, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store<T>(ptr: usize, value: T, immOffset?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function and<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function or<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function xor<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function xchg<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function cmpxchg<T>(ptr: usize, expected: T, replacement: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function wait<T>(ptr: usize, expected: T, timeout: i64): AtomicWaitResult;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function notify(ptr: usize, count: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function fence(): void;\n}\n\n// @ts-ignore: decorator\n@lazy\nexport const enum AtomicWaitResult {\n  OK = 0,\n  NOT_EQUAL = 1,\n  TIMED_OUT = 2\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i8(value: void): i8;\n\nexport namespace i8 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: i8 = -128;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: i8 =  127;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i16(value: void): i16;\n\nexport namespace i16 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: i16 = -32768;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: i16 =  32767;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i32(value: void): i32;\n\nexport namespace i32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: i32 = -2147483648;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: i32 =  2147483647;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function clz(value: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ctz(value: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function popcnt(value: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function rotl(value: i32, shift: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function rotr(value: i32, shift: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function reinterpret_f32(value: f32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load8_s(ptr: usize, immOffset?: usize, immAlign?: usize): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load8_u(ptr: usize, immOffset?: usize, immAlign?: usize): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load16_s(ptr: usize, immOffset?: usize, immAlign?: usize): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load16_u(ptr: usize, immOffset?: usize, immAlign?: usize): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load(ptr: usize, immOffset?: usize, immAlign?: usize): i32;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store8(ptr: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store16(ptr: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store(ptr: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n\n  export namespace atomic {\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load8_u(ptr: usize, immOffset?: usize): i32;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load16_u(ptr: usize, immOffset?: usize): i32;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load(ptr: usize, immOffset?: usize): i32;\n\n    // @ts-ignore: decorator\n    @unsafe @builtin\n    export declare function store8(ptr: usize, value: i32, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @unsafe @builtin\n    export declare function store16(ptr: usize, value: i32, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @unsafe @builtin\n    export declare function store(ptr: usize, value: i32, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function wait(ptr: usize, expected: i32, timeout: i64): AtomicWaitResult;\n\n    export namespace rmw8 {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function xchg_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function cmpxchg_u(ptr: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n\n    export namespace rmw16 {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function xchg_u(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function cmpxchg_u(ptr: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n\n    export namespace rmw {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function xchg(ptr: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function cmpxchg(ptr: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i64(value: void): i64;\n\nexport namespace i64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: i64 = -9223372036854775808;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: i64 =  9223372036854775807;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function clz(value: i64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ctz(value: i64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load8_s(ptr: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load8_u(ptr: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load16_s(ptr: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load16_u(ptr: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load32_s(ptr: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load32_u(ptr: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load(ptr: usize, immOffset?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function popcnt(value: i64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function rotl(value: i64, shift: i64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function rotr(value: i64, shift: i64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function reinterpret_f64(value: f64): i64;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store8(ptr: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store16(ptr: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store32(ptr: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store(ptr: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n\n  export namespace atomic {\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load8_u(ptr: usize, immOffset?: usize): i64;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load16_u(ptr: usize, immOffset?: usize): i64;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load32_u(ptr: usize, immOffset?: usize): i64;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load(ptr: usize, immOffset?: usize): i64;\n\n    // @ts-ignore: decorator\n    @unsafe @builtin\n    export declare function store8(ptr: usize, value: i64, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @unsafe @builtin\n    export declare function store16(ptr: usize, value: i64, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @unsafe @builtin\n    export declare function store32(ptr: usize, value: i64, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @unsafe @builtin\n    export declare function store(ptr: usize, value: i64, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function wait(ptr: usize, expected: i64, timeout: i64): AtomicWaitResult;\n\n    export namespace rmw8 {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function xchg_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function cmpxchg_u(ptr: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n\n    export namespace rmw16 {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function xchg_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function cmpxchg_u(ptr: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n\n    export namespace rmw32 {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function xchg_u(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function cmpxchg_u(ptr: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n\n    export namespace rmw {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function xchg(ptr: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @unsafe @builtin\n      export declare function cmpxchg(ptr: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isize(value: void): isize;\n\nexport namespace isize {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? -2147483648\n    : <isize>-9223372036854775808;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? 2147483647\n    : <isize>9223372036854775807;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function u8(value: void): u8;\n\nexport namespace u8 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: u8 = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: u8 = 255;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function u16(value: void): u16;\n\nexport namespace u16 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: u16 = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: u16 = 65535;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function u32(value: void): u32;\n\nexport namespace u32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: u32 = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: u32 = 4294967295;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function u64(value: void): u64;\n\nexport namespace u64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: u64 = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: u64 = 18446744073709551615;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function usize(value: void): usize;\n\nexport namespace usize {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: usize = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: usize = sizeof<u32>() == sizeof<usize>()\n    ? 4294967295\n    : <usize>18446744073709551615;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function bool(value: void): bool;\n\nexport namespace bool {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: bool = false;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: bool = true;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function f32(value: void): f32;\n\nexport namespace f32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const EPSILON = reinterpret<f32>(0x34000000); // 0x1p-23f\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE = reinterpret<f32>(0x00000001); // 0x0.000001p+0f\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE = reinterpret<f32>(0x7F7FFFFF); // 0x1.fffffep+127f\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_NORMAL_VALUE = reinterpret<f32>(0x00800000); // 0x1p-126f\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_SAFE_INTEGER: f32 = -16777215;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_SAFE_INTEGER: f32 =  16777215;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function abs(value: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ceil(value: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function copysign(x: f32, y: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function floor(value: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load(ptr: usize, immOffset?: usize, immAlign?: usize): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max(left: f32, right: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min(left: f32, right: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function nearest(value: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function reinterpret_i32(value: i32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sqrt(value: f32): f32;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store(ptr: usize, value: f32, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc(value: f32): f32;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function f64(value: void): f64;\n\nexport namespace f64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const EPSILON = reinterpret<f64>(0x3CB0000000000000); // 0x1p-52\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE = reinterpret<f64>(0x0000000000000001); // 0x0.0000000000001p+0\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE = reinterpret<f64>(0x7FEFFFFFFFFFFFFF); // 0x1.fffffffffffffp+1023\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_NORMAL_VALUE = reinterpret<f64>(0x0010000000000000); // 0x1p-1022\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_SAFE_INTEGER: f64 = -9007199254740991;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_SAFE_INTEGER: f64 =  9007199254740991;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function abs(value: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ceil(value: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function copysign(x: f64, y: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function floor(value: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load(ptr: usize, immOffset?: usize, immAlign?: usize): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max(left: f64, right: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min(left: f64, right: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function nearest(value: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function reinterpret_i64(value: i64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sqrt(value: f64): f64;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store(ptr: usize, value: f64, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc(value: f64): f64;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function v128(\n  a: i8, b: i8, c: i8, d: i8, e: i8, f: i8, g: i8, h: i8,\n  i: i8, j: i8, k: i8, l: i8, m: i8, n: i8, o: i8, p: i8\n): v128;\n\nexport namespace v128 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat<T>(x: T): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane<T>(x: v128, idx: u8): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane<T>(x: v128, idx: u8, value: T): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shuffle<T>(a: v128, b: v128, ...lanes: u8[]): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function swizzle(a: v128, s: v128): v128;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function load(ptr: usize, immOffset?: usize, immAlign?: usize): v128;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function load_splat<T>(ptr: usize, immOffset?: usize, immAlign?: usize): v128;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function load_ext<TFrom>(ptr: usize, immOffset?: usize, immAlign?: usize): v128;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function store(ptr: usize, value: v128, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul<T>(a: v128, b: v128): v128; // except i64\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function div<T>(a: v128, b: v128): v128; // f32, f64 only\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg<T>(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add_saturate<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub_saturate<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shl<T>(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr<T>(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function and(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function or(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function xor(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function andnot(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function not(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function bitselect(v1: v128, v2: v128, c: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function any_true<T>(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function all_true<T>(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function dot<T>(a: v128, b: v128): v128; // i16 only\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function abs<T>(a: v128): v128; // f32, f64 only\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sqrt<T>(a: v128): v128; // f32, f64 only\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function convert<T>(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc_sat<T>(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function narrow<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function widen_low<T>(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function widen_high<T>(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function qfma<T>(v1: v128, v2: v128, c: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function qfms<T>(v1: v128, v2: v128, c: v128): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i8x16(\n  a: i8, b: i8, c: i8, d: i8, e: i8, f: i8, g: i8, h: i8,\n  i: i8, j: i8, k: i8, l: i8, m: i8, n: i8, o: i8, p: i8\n): v128;\n\nexport namespace i8x16 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: i8): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane_s(x: v128, idx: u8): i8;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane_u(x: v128, idx: u8): u8;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: i8): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add_saturate_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add_saturate_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub_saturate_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub_saturate_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shl(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_s(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_u(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function any_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function all_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function narrow_i16x8_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function narrow_i16x8_u(a: v128, b: v128): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i16x8(a: i16, b: i16, c: i16, d: i16, e: i16, f: i16, g: i16, h: i16): v128;\n\nexport namespace i16x8 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: i16): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane_s(x: v128, idx: u8): i16;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane_u(x: v128, idx: u8): u16;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: i16): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add_saturate_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add_saturate_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub_saturate_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub_saturate_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shl(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_s(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_u(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function any_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function all_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function narrow_i32x4_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function narrow_i32x4_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function widen_low_i8x16_s(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function widen_low_i8x16_u(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function widen_high_i8x16_s(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function widen_high_i8x16_u(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load8x8_s(ptr: usize, immOffset?: u32, immAlign?: u32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load8x8_u(ptr: usize, immOffset?: u32, immAlign?: u32): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i32x4(a: i32, b: i32, c: i32, d: i32): v128;\n\nexport namespace i32x4 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane(x: v128, idx: u8): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function dot_i16x8_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shl(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_s(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_u(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function any_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function all_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc_sat_f32x4_s(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc_sat_f32x4_u(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function widen_low_i16x8_s(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function widen_low_i16x8_u(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function widen_high_i16x8_s(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function widen_high_i16x8_u(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load16x4_s(ptr: usize, immOffset?: u32, immAlign?: u32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load16x4_u(ptr: usize, immOffset?: u32, immAlign?: u32): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i64x2(a: i64, b: i64): v128;\n\nexport namespace i64x2 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: i64): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane(x: v128, idx: u8): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: i64): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shl(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_s(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_u(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function any_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function all_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc_sat_f64x2_s(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc_sat_f64x2_u(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load32x2_s(ptr: usize, immOffset?: u32, immAlign?: u32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load32x2_u(ptr: usize, immOffset?: u32, immAlign?: u32): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function f32x4(a: f32, b: f32, c: f32, d: f32): v128;\n\nexport namespace f32x4 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: f32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane(x: v128, idx: u8): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: f32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function div(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function abs(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sqrt(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function convert_i32x4_s(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function convert_i32x4_u(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function qfma(a: v128, b: v128, c: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function qfms(a: v128, b: v128, c: v128): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function f64x2(a: f64, b: f64): v128;\n\nexport namespace f64x2 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: f64): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane(x: v128, idx: u8): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: f64): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function div(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function abs(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sqrt(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function convert_i64x2_s(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function convert_i64x2_u(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function qfma(a: v128, b: v128, c: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function qfms(a: v128, b: v128, c: v128): v128;\n}\n\nexport namespace v8x16 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shuffle(\n    a: v128, b: v128,\n    l0: u8, l1: u8, l2: u8, l3: u8, l4: u8, l5: u8, l6: u8, l7: u8,\n    l8: u8, l9: u8, l10: u8, l11: u8, l12: u8, l13: u8, l14: u8, l15: u8\n  ): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function swizzle(a: v128, s: v128): v128;\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function load_splat(ptr: usize, immOffset?: u32, immAlign?: u32): v128;\n}\n\nexport namespace v16x8 {\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function load_splat(ptr: usize, immOffset?: u32, immAlign?: u32): v128;\n}\n\nexport namespace v32x4 {\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function load_splat(ptr: usize, immOffset?: u32, immAlign?: u32): v128;\n}\n\nexport namespace v64x2 {\n\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function load_splat(ptr: usize, immOffset?: u32, immAlign?: u32): v128;\n}\n\n// @ts-ignore: decorator\n@external(\"env\", \"abort\")\ndeclare function abort(\n  message?: string | null,\n  fileName?: string | null,\n  lineNumber?: u32,\n  columnNumber?: u32\n): void;\n\n// @ts-ignore: decorator\n@external(\"env\", \"trace\")\ndeclare function trace(\n  message: string,\n  n?: i32,\n  a0?: f64,\n  a1?: f64,\n  a2?: f64,\n  a3?: f64,\n  a4?: f64\n): void;\n"]}